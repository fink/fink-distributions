Info3: <<
Package: ppl13
# %v=1.2 is new libN=14
Version: 1.1
Revision: 3
Description: Parma Polyhedra Library
Homepage: http://www.cs.unipr.it/ppl
License: GPL
Maintainer: David Fang <fangism@users.sourceforge.net>
BuildDependsOnly: True
Depends: <<
	%N-shlibs (= %v-%r),
	glpk36-shlibs
<<
BuildDepends: <<
	fink (>= 0.28),
	fink-package-precedence,
	glpk36-dev,
# only darwins that are missing uudecode need:
#	gmime24,
	gmp5,
	m4,
	ocaml,
	system-java-dev
<<
Conflicts: ppl, ppl9, ppl10, ppl11, ppl12
Replaces: ppl, ppl9, ppl10, ppl11, ppl12
GCC: 4.0
Source: ftp://ftp.cs.unipr.it/pub/ppl/releases/%v/ppl-%v.tar.bz2
Source-Checksum: SHA256(de521b223a29f9d9302a29c17b5e90dfd9c6d1a59c39465072da28e6ef8238ef)
PatchFile: %n.patch
PatchFile-MD5: 07bf6aa1dcaf103d92da3516ae35c4a3
ConfigureParams: <<
	--libdir='${prefix}/lib/ppl13' \
	--mandir=%p/share/man \
	--infodir=%p/share/info \
	--disable-static \
	--with-gmp-include=%p/include \
	--with-gmp-lib=%p/lib/gmp5 \
	--enable-pch \
	$disable_fpmath \
	--with-java="$JAVA_HOME" \
	CFLAGS="-g -O2 -pipe -fpch-preprocess -fPIC" \
	CXXFLAGS="-g -O2 -pipe -fpch-preprocess -fPIC" \
	CPPFLAGS="-I$JAVA_INCLUDE -I%p/include" \
	LDFLAGS="-L%p/lib" \
	--enable-check=thorough \
	-C
# if you do not have the patience for the 'thorough' tests, --enable-check=quick
# CPPFLAGS/LDFLAGS += %p needed to help find glpk
<<
PatchScript: <<
	#!/bin/sh -ev
	darwin_vers=`uname -r | cut -d. -f1`
	%{default_script}
	# g++-4.0.1 rejects template instantiating w/ anonymous enums -- fangism
	# this was fixed in ppl-0.11; the following patch doesn't do anything
	# file=src/meta_programming.hh
	# sed -i.orig -e '/struct Bool/,/^};/s|enum {|enum value_type {|' $file
	# symbols in anonymous namespace given extern linkage
	# This was fixed for 0.12:
	# file=src/initializer.hh
	# sed -i.orig -e '/::Init.*initializer/s|^|static |' $file
	# To take advantage of precompiled headers, defined macros must match.
	# patch could apply to src/Makefile.am too
	file=src/Makefile.in
	sed -i.orig -e '/CXXCOMPILE.*-xc++-header/s|-o|-DPIC &|' $file
	# files compiled here are VERY taxing on memory, so we serialize
	file=tests/MIP_Problem/Makefile.in
	echo ".NOTPARALLEL: check-am" >> $file
	if false
	then
	# move pkglibdir to a versioned dir to avoid shlib conflict
	file=interfaces/Java/jni/Makefile.in
	sed -i.orig -e '/^pkglibdir =/s|$|13|' $file
	file=interfaces/Java/Makefile.in
	sed -i.orig -e '/^pkglibdir =/s|$|13|' $file
	fi
	# use consistent architecture for testing, override default as needed
	file=interfaces/Java/tests/Makefile.in
	case "%m" in
	powerpc ) ;;
	i386 ) sed -i.orig '/\$(JAVA)/s|-classpath|-d32 &|' $file ;;
	x64_64 ) ;;
	esac
	# don't mistake 10.10 for 10.2!
	sed -i.orig -e 's|10\.\[012\]\*|10.[012][,.]*|g' configure
<<
UseMaxBuildJobs: true
CompileScript: <<
	#!/bin/sh -ev
	mkdir build
	cd build
	JAVA_FW=/System/Library/Frameworks/JavaVM.framework
	if test -x /usr/libexec/java_home
	then JAVA_HOME=`/usr/libexec/java_home`
	else JAVA_HOME=$JAVA_FW/Home
	fi
	# try to locate jni.h, it may not be under java_home!
	test -d $JAVA_HOME && test -x $JAVA_HOME || \
	  { echo "$JAVA_HOME not found." ; exit 1 ;}
	JAVA_INCLUDE=$JAVA_HOME/include
	test -r $JAVA_INCLUDE/jni.h || JAVA_INCLUDE=$JAVA_FW/Headers
	test -r $JAVA_INCLUDE/jni.h || \
	  { echo "Missing Java development package containing jni.h." ; \
	  echo "Please download/install from connect.apple.com" ; \
	  echo "or install the JDK from Oracle and try again." ; \
	  echo "Thank you and have a nice day." ; exit 1 ;}
	echo "Found $JAVA_INCLUDE/jni.h"
	darwin_vers=`uname -r | cut -d. -f1`
	# workaround llvm/clang's absence of -f rounding-math, 
	# which caused test suite failures
	if test "$darwin_vers" -ge 11 ; then
	  disable_fpmath="--disable-fpmath"
	fi
	../configure %c
	# for ccache-default
	export CCACHE_SLOPPINESS=time_macros
	make
	fink-package-precedence --prohibit-bdep=ppl{,9,10,11,12,13} .
<<
InfoTest: <<
	TestScript: <<
	#!/bin/sh -ev
	cd build
	# for ccache-default
	export CCACHE_SLOPPINESS=time_macros
	make -k check || exit 2
	fink-package-precedence --prohibit-bdep=ppl{,9,10,11,12,13} . || exit 2
	<<
	TestSuiteSize: large
<<
InstallScript: <<
	#!/bin/sh -ev
	cd build
	make install DESTDIR=%d
	# Convenience symlinks of .la/.dylib files from %p/%lib to %p/lib/ppl13
	# so most packages will find them w/o requiring passing --with-ppl-...=
	ln -s %p/lib/%n/libppl.la %i/lib/libppl.la
	ln -s %p/lib/%n/libppl_c.la %i/lib/libppl_c.la
	ln -s %p/lib/%n/libppl.13.dylib %i/lib/libppl.dylib
	ln -s %p/lib/%n/libppl_c.4.dylib %i/lib/libppl_c.dylib
<<
DocFiles: <<
	BUGS
	COPYING
	CREDITS
	ChangeLog*
	INSTALL
	NEWS
	README*
	STANDARDS
	TODO
<<
SplitOff: <<
  Package: %N-shlibs
  Depends: <<
	gmp5-shlibs,
	libgmpxx5-shlibs
  <<
  Files: <<
    %p/lib/%N/libppl.13*.dylib
    %p/lib/%N/libppl_c.4*.dylib
    %p/lib/%N/ppl/libppl_java.jnilib
    %p/lib/%N/ppl/ppl_java.jar
  <<
  Shlibs: <<
    %p/lib/%N/libppl.13.dylib 14.0.0 %n (>= 1.1-1)
    %p/lib/%N/libppl_c.4.dylib 5.0.0 %n (>= 1.1-1)
    !%p/lib/%N/ppl/libppl_java.jnilib
  <<
  DocFiles: <<
	BUGS
	COPYING
	CREDITS
	ChangeLog*
	INSTALL
	NEWS
	README*
	STANDARDS
	TODO
  <<
<<
DescDetail: <<
The Parma Polyhedra Library (PPL) is a C++ library for the 
manipulation of (not necessarily closed) convex polyhedra 
and other numerical abstractions. The applications of convex 
polyhedra include program analysis, optimized compilation, 
integer and combinatorial optimization and statistical 
data-editing. The Parma Polyhedra Library is user friendly 
(you write `x + 2*y + 5*z <= 7' when you mean it), fully 
dynamic (available virtual memory is the only limitation 
to the dimension of anything), written in standard C++, 
exception-safe, rather efficient and thoroughly documented.
<<
DescPackaging: <<
ppl_lpsol (bin) links against libglpk, but none of ppl-shlibs depend on it.

Reminder to never move %p/lib/ppl from ppl-shlibs since it
brings over private .la as well as private shared lib.

Added CompileScript to deal with Apple's new java.

Initial packaging by Jack Howarth <howarth@bromo.med.uc.edu>.

fangism turned on use of precompiled headers and exported a 
few environment variables for ccache-default support.
Patch to add -DPIC allows defined macros to match to use .gch.

Noticed checks and references to OCaml, which may need to be 
added to BuildDepends or TestDepends.

Since 0.11.1, build against gmp5.

Since 0.12, bdep ocaml.
Needs gmime24 for uudecode, detected during configure.

1.1 was released 2013-Oct, but added to fink in Dec. 2014
<<
DescPort: <<
ppl.hh fix for clang-5 (xcode9) from upstream:
http://www.cs.unipr.it/git/gitweb.cgi?p=ppl/ppl.git;a=commit;h=c39f6a07b51f89e365b05ba4147aa2aa448febd7
<<
<<
