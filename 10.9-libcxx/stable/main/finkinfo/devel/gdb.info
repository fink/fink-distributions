Info2: <<
Package: gdb
Version: 10.1
Revision: 1
Maintainer: None <fink-devel@lists.sourceforge.net>
License: GPL3
Source: mirror:gnu:%n/%n-%v.tar.xz
Source-Checksum: SHA256(f82f1eceeec14a3afa2de8d9b0d3c91d5a3820e23e0a01bbb70ef9f0276b62c0)
PatchFile: %n.patch
PatchFile-MD5: 92481fdcd7d6769d3e0a183db298268d
Depends: <<
	expat1-shlibs,
	gc-shlibs,
	gmp5-shlibs,
	guile22-shlibs,
	libgettext8-shlibs,
	libiconv,
	libmpfr6-shlibs,
	libncursesw5-shlibs,
	libsource-highlight4-shlibs,
	python37,
	python37-shlibs
<<
BuildDepends: <<
	expat1,
	fink (>= 0.32),
	fink-package-precedence,
	gc,
	gettext-tools,
	gmp5,
	guile22,
	guile22-dev,
	libgettext8-dev,
	libiconv-dev,
	libmpfr6,
	libncurses5,
	libncursesw5,
	libsource-highlight4,
	pkgconfig,
	python37,
	texinfo (>= 5.1-2)
<<
SetLDFLAGS: -L%p/lib/python3.7/config-3.7m-darwin
ConfigureParams: <<
	--program-prefix=fsf- \
	--with-expat \
	--with-python=%p/bin/python3.7 \
	--disable-gdbtk \
	--enable-tui \
	--disable-werror \
	--with-guile
<<
SetCFLAGS: -O2 -g -Wno-unused-value
Architecture: x86_64, i386
DocFiles: COPYING COPYING3 README
InfoDocs: fsf-gdb.info
Homepage: https://www.gnu.org/software/gdb/
Description: The GNU Project Debugger
DescDetail: <<
GDB, the GNU Project debugger, allows you to see what is going on
`inside' another program while it executes -- or what another program
was doing at the moment it crashed.
<<
PatchScript: <<
	#!/bin/sh -ev
	sed 's|@FINKPREFIX@|%p|g' < %{PatchFile} | patch -p1
	perl -pi -e 's|Wmissing-parameter-type|Wmissing-prototypes|g' gdb/configure
	perl -pi -e 's|Wold-style-declaration|Wout-of-line-declaration|g' gdb/configure
	perl -pi -e 's|sbrk ||g' gdb/configure libiberty/configure
	perl -pi -e 's|machine/setjmp.h|setjmp.h|' gdb/darwin-nat.c
<<
CompileScript: <<
	%{default_script}
	fink-package-precedence .
<<
InstallScript:<<
	#!/bin/bash -ev
	make install DESTDIR=%d
	cd %i/share/info
	rm annotate.info stabs.info bfd.info
	infofiles="1 2 3 4 5 6 7 8"
	for infofile in $infofiles ; do
		mv gdb.info-$infofile fsf-gdb.info-$infofile
	done
	mv gdb.info fsf-gdb.info
	# It seems likely that the libbfd, libopcodes, libiberty and their headers may
	# also exist in some other packages
	rm -rf %i/lib %i/include

	# Bury fsf-gdb binary and install wrapper script
	mkdir -p %i/lib/fsf-gdb
	mv %i/bin/fsf-gdb %i/lib/fsf-gdb/fsf-gdb
	/usr/bin/install -m 755 %b/fsf-gdb-wrapper %i/bin/fsf-gdb
<<
PostInstScript: <<
	# Make the executables sgid procmod
	chgrp procmod %p/lib/fsf-gdb/fsf-%n
	chmod g+s %p/lib/fsf-gdb/fsf-%n
	update-alternatives --install %p/share/info/gdb.info gdb.info %p/share/info/fsf-gdb.info 40
	update-alternatives --install %p/share/info/gdbint.info gdbint.info %p/share/info/fsf-gdbint.info 40
<<
PreRmScript: <<
	if [ $1 != "upgrade" ]; then
		infofiles="gdb.info gdbint.info"
		for infofile in $infofiles ; do
			update-alternatives --remove $infofile %p/share/info/fsf-$infofile
		done
	fi
	/usr/bin/find %p/share/gdb/python/gdb -name '*.pyc' -delete
	/usr/bin/find %p/share/gdb/python/gdb -name '*.pyo' -delete
<<
DescUsage: <<
The programs in this package are prefixed with fsf- (gdb is "fsf-gdb",
etc.) to avoid conflicting with Xcode's programs of the same name.

To execute fsf-gdb without using sudo, the binary needs to be codesigned
on each machine that it is installed on. This requires the creation
of a certificate and signing of the fsf-gdb binary with the following
steps.

1) Open the application 'Keychain Access' from the Utilities folder.
2) In the Keychain Access application, select the 'Create a
   Certificate...' submenu item from the 'Keychain Access' menu and
   the 'Certificate Assistant' submenu.
3) In the 'Certificate Assistant' panel, enter 'gdb-cert' for the name 
   of the certificate and leave the Identity Type as 'Self Signed Root'.
   Set the Certificate Type to 'Code Signing' and enable the 'Let me
   override defaults' checkbox. Click the 'Continue'  button. You may
   wish to lengthen the default 365 day lifespan of the certificate
   to 3650 days.
4) Continue clicking the 'Continue' buttons that appear until you see
   the panel to 'Specify a Location For The Certificate'. Set the
   Keychain to 'System' at this point. If you can't store the
   certificate in the 'System' keychain, create it in the 'login'
   keychain, then export it. You can then import it into the 'System'
   keychain.
5) Select the 'System' entry in the Keychains listing of the Keychain
   Access window. Select your newly created 'gdb-cert' certificate and
   select the 'Get Info' contextual menu item, expand the 'Trust'
   item and set 'Code Signing' to '"Always Trust'.
6) Quit the 'Keychain Access' application.
7) On darwin12 or later, you must edit the line in the file
   /System/Library/LaunchDaemons/com.apple.taskgated.plist from

                   <string>-s</string>

   to

                   <string>-sp</string>

   adding the '-p' option. Due to kernel caching, a restart is needed
   for the changes to take effect.
8) After the restart, the actual codesigning should be done with the
   command 'sudo codesign -s gdb-cert %p/lib/fsf-gdb/fsf-gdb'. Note it
   can take over five minutes for the codesigning to complete.

The hardened security in Sierra requires the additional step of executing

   csrutil enable --without debug

from within the Terminal application when booted under the Recovery Partition.
<<
<<
