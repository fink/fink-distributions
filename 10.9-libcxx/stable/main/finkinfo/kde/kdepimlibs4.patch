diff -Nurd kdepimlibs-4.3.98/CMakeLists.txt kdepimlibs-4.3.98-new/CMakeLists.txt
--- kdepimlibs-4.3.98/CMakeLists.txt	2010-01-31 14:28:43.000000000 -0500
+++ kdepimlibs-4.3.98-new/CMakeLists.txt	2010-02-01 09:35:23.000000000 -0500
@@ -39,8 +39,6 @@
 endif (WIN32)
 macro_log_feature(Boost_FOUND "Boost" "Boost C++ Libraries" "http://www.boost.org" TRUE ${Boost_MINIMUM_VERSION} "The Boost libraries boost and boost-graph are required by several critical KDEPIM apps.")
 
-#FindGpgme.cmake already handles the log message but we must ensure it is required.
-find_package(Gpgme REQUIRED)
 # configure macros
 if (GPGME_FOUND)
   include (gpgme++/ConfigureChecks.cmake)
@@ -65,8 +63,6 @@
 ############### Now, we add the KDEPIMLibs components ###############
 # These targets will always be built
 add_subdirectory(cmake)
-add_subdirectory(gpgme++)
-add_subdirectory(qgpgme)
 
 if (NOT KDEPIM_ONLY_KLEO)
   add_subdirectory(kabc)
diff -Nurd kdepimlibs-4.12.2/akonadi/xml/CMakeLists.txt kdepimlibs-4.12.2/akonadi/xml/CMakeLists.txt
--- kdepimlibs-4.12.2/akonadi/xml/CMakeLists.txt	2014-02-13 12:49:52.000000000 -0500
+++ kdepimlibs-4.12.2/akonadi/xml/CMakeLists.txt	2014-02-13 12:50:27.000000000 -0500
@@ -8,6 +8,7 @@
     ${KDE4_INCLUDES}
     ${LIBXML2_INCLUDE_DIR}
     ${CMAKE_CURRENT_BINARY_DIR}
+    @FINK_PREFIX@/include
 )
 
 set( akonadixml_SRCS
diff -ruN kdepimlibs-4.14.6-orig/akonadi/tests/actionstatemanagertest.cpp kdepimlibs-4.14.6/akonadi/tests/actionstatemanagertest.cpp
--- kdepimlibs-4.14.6-orig/akonadi/tests/actionstatemanagertest.cpp	2015-02-26 15:31:08.000000000 -0600
+++ kdepimlibs-4.14.6/akonadi/tests/actionstatemanagertest.cpp	2017-12-15 23:11:03.000000000 -0600
@@ -27,8 +27,6 @@
 #include "../actionstatemanager.cpp"
 #undef QT_NO_CLIPBOARD
 
-#include "../pastehelper.cpp"
-
 typedef QHash<Akonadi::StandardActionManager::Type, bool> StateMap;
 Q_DECLARE_METATYPE( StateMap )
 
diff -ruN kdepimlibs-4.14.6-orig/akonadi/tests/collectionsynctest.cpp kdepimlibs-4.14.6/akonadi/tests/collectionsynctest.cpp
--- kdepimlibs-4.14.6-orig/akonadi/tests/collectionsynctest.cpp	2015-02-26 15:31:08.000000000 -0600
+++ kdepimlibs-4.14.6/akonadi/tests/collectionsynctest.cpp	2017-12-15 23:11:47.000000000 -0600
@@ -25,9 +25,11 @@
 #include <akonadi/collection.h>
 #include <akonadi/collectionfetchjob.h>
 #include <akonadi/collectionfetchscope.h>
+#include <collectiondeletejob.h>
+#include <collectionmodifyjob.h>
 #include <akonadi/entitydisplayattribute.h>
 
-#include "../akonadi/collectionsync.cpp"
+#include "../akonadi/collectionsync_p.h"
 
 #include <krandom.h>
 
diff -Nurd kdepimlibs-4.14.6/kcal/icalformat_p.cpp kdepimlibs-4.14.6-new/kcal/icalformat_p.cpp
--- kdepimlibs-4.14.6/kcal/icalformat_p.cpp	2015-02-26 16:31:08.000000000 -0500
+++ kdepimlibs-4.14.6-new/kcal/icalformat_p.cpp	2021-08-18 04:51:17.000000000 -0400
@@ -2087,7 +2087,6 @@
   t.second = 0;
 
   t.is_date = 1;
-  t.is_utc = 0;
   t.zone = 0;
 
   return t;
@@ -2107,7 +2106,6 @@
 
   t.is_date = 0;
   t.zone = 0;   // zone is NOT set
-  t.is_utc = datetime.isUtc() ? 1 : 0;
 
   // _dumpIcaltime( t );
 
@@ -2174,7 +2172,7 @@
   }
 
   KTimeZone ktz;
-  if ( !t.is_utc ) {
+  if ( !icaltime_is_utc(t) ) {
     ktz = dt.timeZone();
   }
 
@@ -2207,7 +2205,7 @@
 //  _dumpIcaltime( t );
 
   KDateTime::Spec timeSpec;
-  if ( t.is_utc  ||  t.zone == icaltimezone_get_utc_timezone() ) {
+  if ( icaltime_is_utc(t) ||  t.zone == icaltimezone_get_utc_timezone() ) {
     timeSpec = KDateTime::UTC;   // the time zone is UTC
     utc = false;    // no need to convert to UTC
   } else {
diff -Nurd kdepimlibs-4.14.6/kcal/icaltimezones.cpp kdepimlibs-4.14.6-new/kcal/icaltimezones.cpp
--- kdepimlibs-4.14.6/kcal/icaltimezones.cpp	2015-02-26 16:31:08.000000000 -0500
+++ kdepimlibs-4.14.6-new/kcal/icaltimezones.cpp	2021-08-18 04:51:34.000000000 -0400
@@ -50,7 +50,7 @@
 {
   return QDateTime( QDate( t.year, t.month, t.day ),
                     QTime( t.hour, t.minute, t.second ),
-                    ( t.is_utc ? Qt::UTC : Qt::LocalTime ) );
+                    ( icaltime_is_utc(t) ? Qt::UTC : Qt::LocalTime ) );
 }
 
 // Maximum date for time zone data.
@@ -77,7 +77,6 @@
   t.second = local.time().second();
   t.is_date = 0;
   t.zone = 0;
-  t.is_utc = 0;
   return t;
 }
 
@@ -787,7 +786,7 @@
     case ICAL_LASTMODIFIED_PROPERTY:
     {
       icaltimetype t = icalproperty_get_lastmodified(p);
-      if ( t.is_utc ) {
+      if ( icaltime_is_utc(t) ) {
         data->d->lastModified = toQDateTime( t );
       } else {
         kDebug() << "LAST-MODIFIED not UTC";
@@ -972,7 +971,7 @@
   // Convert DTSTART to QDateTime, and from local time to UTC
   QDateTime localStart = toQDateTime( dtstart );   // local time
   dtstart.second -= prevOffset;
-  dtstart.is_utc = 1;
+  dtstart = icaltime_convert_to_zone(dtstart, icaltimezone_get_utc_timezone());
   QDateTime utcStart = toQDateTime( icaltime_normalize( dtstart ) );   // UTC
 
   transitions += utcStart;
@@ -999,13 +998,12 @@
           t.minute = dtstart.minute;
           t.second = dtstart.second;
           t.is_date = 0;
-          t.is_utc = 0;    // dtstart is in local time
         }
         // RFC2445 states that RDATE must be in local time,
         // but we support UTC as well to be safe.
-        if ( !t.is_utc ) {
+        if ( !icaltime_is_utc(t) ) {
           t.second -= prevOffset;    // convert to UTC
-          t.is_utc = 1;
+          t = icaltime_convert_to_zone(t, icaltimezone_get_utc_timezone());
           t = icaltime_normalize( t );
         }
         transitions += toQDateTime( t );
diff -Nurd kdepimlibs-4.14.6/kcalcore/icalformat_p.cpp kdepimlibs-4.14.6-new/kcalcore/icalformat_p.cpp
--- kdepimlibs-4.14.6/kcalcore/icalformat_p.cpp	2015-02-26 16:31:08.000000000 -0500
+++ kdepimlibs-4.14.6-new/kcalcore/icalformat_p.cpp	2021-08-18 04:43:57.000000000 -0400
@@ -2301,7 +2301,6 @@
     t.second = 0;
 
     t.is_date = 1;
-    t.is_utc = 0;
     t.zone = 0;
 
     return t;
@@ -2323,7 +2322,6 @@
         t.second = datetime.time().second();
     }
     t.zone = 0;   // zone is NOT set
-    t.is_utc = datetime.isUtc() ? 1 : 0;
 
     // _dumpIcaltime( t );
 
@@ -2398,7 +2396,7 @@
     }
 
     KTimeZone ktz;
-    if (!t.is_utc) {
+    if (!icaltime_is_utc(t)) {
         ktz = dt.timeZone();
     }
 
@@ -2431,7 +2429,7 @@
 //  _dumpIcaltime( t );
 
     KDateTime::Spec timeSpec;
-    if (t.is_utc  ||  t.zone == icaltimezone_get_utc_timezone()) {
+    if (icaltime_is_utc(t) ||  t.zone == icaltimezone_get_utc_timezone()) {
         timeSpec = KDateTime::UTC;   // the time zone is UTC
         utc = false;    // no need to convert to UTC
     } else {
diff -Nurd kdepimlibs-4.14.6/kcalcore/icaltimezones.cpp kdepimlibs-4.14.6-new/kcalcore/icaltimezones.cpp
--- kdepimlibs-4.14.6/kcalcore/icaltimezones.cpp	2015-02-26 16:31:08.000000000 -0500
+++ kdepimlibs-4.14.6-new/kcalcore/icaltimezones.cpp	2021-08-18 04:44:15.000000000 -0400
@@ -54,7 +54,7 @@
 {
     return QDateTime(QDate(t.year, t.month, t.day),
                      QTime(t.hour, t.minute, t.second),
-                     (t.is_utc ? Qt::UTC : Qt::LocalTime));
+                     (icaltime_is_utc(t) ? Qt::UTC : Qt::LocalTime));
 }
 
 // Maximum date for time zone data.
@@ -81,7 +81,6 @@
     t.second = local.time().second();
     t.is_date = 0;
     t.zone = 0;
-    t.is_utc = 0;
     return t;
 }
 
@@ -886,7 +885,7 @@
         case ICAL_LASTMODIFIED_PROPERTY:
         {
             const icaltimetype t = icalproperty_get_lastmodified(p);
-            if (t.is_utc) {
+            if (icaltime_is_utc(t)) {
                 data->d->lastModified = toQDateTime(t);
             } else {
                 kDebug() << "LAST-MODIFIED not UTC";
@@ -1259,7 +1258,7 @@
     // Convert DTSTART to QDateTime, and from local time to UTC
     const QDateTime localStart = toQDateTime(dtstart);     // local time
     dtstart.second -= prevOffset;
-    dtstart.is_utc = 1;
+    dtstart = icaltime_convert_to_zone(dtstart, icaltimezone_get_utc_timezone());
     const QDateTime utcStart = toQDateTime(icaltime_normalize(dtstart));       // UTC
 
     transitions += utcStart;
@@ -1286,13 +1285,12 @@
                     t.minute = dtstart.minute;
                     t.second = dtstart.second;
                     t.is_date = 0;
-                    t.is_utc = 0;    // dtstart is in local time
                 }
                 // RFC2445 states that RDATE must be in local time,
                 // but we support UTC as well to be safe.
-                if (!t.is_utc) {
+                if (!icaltime_is_utc(t)) {
                     t.second -= prevOffset;    // convert to UTC
-                    t.is_utc = 1;
+                    t = icaltime_convert_to_zone(t, icaltimezone_get_utc_timezone());
                     t = icaltime_normalize(t);
                 }
                 transitions += toQDateTime(t);
