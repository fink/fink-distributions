Info2: <<

Package: service-identity-py%type_pkg[python]
Version: 18.1.0
Revision: 1
Type: python (2.7 3.4 3.5 3.6 3.7 3.8)

Maintainer: Derek Homeier <dhomeie@gwdg.de>
Homepage: https://pypi.org/project/service_identity/
License: OSI-Approved

Depends: python%type_pkg[python]
BuildDepends: setuptools-tng-py%type_pkg[python]

#Source: https://files.pythonhosted.org/packages/source/s/service-identity/service_identity-%v.tar.gz
#Source-Checksum: SHA256(0858a54aabc5b459d1aafa8a518ed2081a285087f349fe3e55197989232e2e2d)
Source: https://github.com/pyca/service-identity/archive/%v.tar.gz
Source-Checksum: SHA256(695df7b4ffe00e232ac3887ed347615611d0a9c74074f8832c7eb191f70d2c40)
SourceRename: service-identity-%v.tar.gz

CompileScript: %p/bin/python%type_raw[python] setup.py build

InstallScript: %p/bin/python%type_raw[python] setup.py install --root=%d

DocFiles: AUTHORS.rst CHANGELOG.rst LICENSE README.rst docs

InfoTest: <<
    TestDepends: <<
        pytest-py%type_pkg[python],
        asn1crypto-py%type_pkg[python],
        idna-py%type_pkg[python],
        pyasn1-modules-py%type_pkg[python],
        pyopenssl-py%type_pkg[python]
    <<
    TestScript: PYTHONPATH=%b/build/lib %p/bin/python%type_raw[python] -Bm pytest || exit 2
<<

Description: Service identity verification for Python
DescDetail: <<
Use this package if:
 - you use pyOpenSSL and don't want to be MITMed or
 - if you want to verify that a PyCA cryptography certificate is valid for a
   certain hostname or IP address.

service_identity aspires to give you all the tools you need for verifying
whether a certificate is valid for the intended purposes.
In the simplest case, this means host name verification. However,
service_identity implements RFC 6125 fully and plans to add other
relevant RFCs too.
<<

DescPort: <<
<<

# Info2
<<
