# -*- coding: ascii; tab-width: 4 -*-
Info2: <<
Package: pybind11-py%type_pkg[python]
Version: 2.9.1
Revision: 1
Type: python (2.7 3.5 3.6 3.7 3.8 3.9 3.10)

# Free to update, modify, and take over
Maintainer: Hanspeter Niederstrasser <nieder@users.sourceforge.net>
Depends: <<
	python%type_pkg[python]-shlibs
<<
BuildDepends: <<
	boost1.68-nopython,
	cmake,
	eigen3,
	fink-buildenv-modules,
	python%type_pkg[python],
	setuptools-tng-py%type_pkg[python]
<<
Recommends: <<
	numpy-py%type_pkg[python]
<<
License: BSD
#Source: https://files.pythonhosted.org/packages/source/p/pybind11/pybind11-%v.tar.gz
Source: https://github.com/pybind/pybind11/archive/v%v.tar.gz
SourceRename: pybind11-%v.tar.gz
Source-Checksum: SHA256(c6160321dc98e6e1184cc791fbeadd2907bb4a0ce0e447f2ea4ff8ab56550913)

GCC: 4.0
CompileScript: <<
	#!/bin/sh -ev
	. %p/sbin/fink-buildenv-cmake.sh
	mkdir finkbuild
	pushd finkbuild
	cmake $FINK_CMAKE_ARGS \
		-DBoost_INCLUDE_DIR=%p/opt/boost-1_68/include \
		-DPYBIND11_PYTHON_VERSION:STRING=%type_raw[python] \
		-DPYTHON_EXECUTABLE:FILEPATH=%p/bin/python%type_raw[python] \
		-LAH \
		..
	make -w
	popd
	%p/bin/python%type_raw[python] setup.py build
<<
# TestDepends on scipy>=1.5.4 become circular as of scipy 1.7;
# 3 failures in test_numpy_dtype on blank space in `str(dict(...))`
# - don't know how to skip in this setup, so exit with a warning.
InfoTest: <<
	TestDepends: <<
		numpy-py%type_pkg[python],
		pytest-py%type_pkg[python]
	<<
	TestScript: <<
		cd finkbuild; make -w check || exit 1
	<<
<<
InstallScript: <<
	cd finkbuild; make install DESTDIR=%d
	%p/bin/python%type_raw[python] setup.py install --root=%d
	mv %i/bin/pybind11-config %i/bin/pybind11-config-py%type_pkg[python]
<<
PostInstScript: <<
	update-alternatives --install %p/bin/pybind11-config pybind11-config %p/bin/pybind11-config-py%type_pkg[python] %type_pkg[python]
<<
PreRmScript: <<
	if [ $1 != "upgrade" ]; then
		update-alternatives --remove pybind11-config %p/bin/pybind11-config-py%type_pkg[python]
	fi
<<
SplitOff: <<
	Package: %N-dev
	Description: Development files for %N
	Depends: %N (= %v-%r)
	Conflicts: pybind11-py%type_pkg[python]-dev
	Replaces: pybind11-py%type_pkg[python]-dev
	BuildDependsOnly: True
	Files: <<
		include
		share/cmake
	<<
<<
DocFiles: README.rst LICENSE docs
Homepage: https://github.com/pybind/pybind11
Description: Seamless operability between C++11 and Python
DescDetail: <<
pybind11 is a lightweight header-only library that exposes C++ types in
Python and vice versa, mainly to create Python bindings of existing C++
code. Its goals and syntax are similar to the excellent Boost.Python by
David Abrahams: to minimize boilerplate code in traditional extension
modules by inferring type information using compile-time introspection.
The main issue with Boost.Python - and the reason for creating such a similar
project - is Boost. Boost is an enormously large and complex suite of utility
libraries that works with almost every C++ compiler in existence. This
compatibility has its cost: arcane template tricks and workarounds are
necessary to support the oldest and buggiest of compiler specimens.
Now that C++11-compatible compilers are widely available, this heavy
machinery has become an excessively large and unnecessary dependency.
Think of this library as a tiny self-contained version of Boost.Python
with everything stripped away that isn't relevant for binding generation.
Without comments, the core header files only require ~4K lines of code and
depend on Python (2.7 or 3.x, or PyPy2.7 >= 5.7) and the C++ standard library.
This compact implementation was possible thanks to some of the new C++11
language features (specifically: tuples, lambda functions and variadic
templates). Since its creation, this library has grown beyond Boost.Python
in many ways, leading to dramatically simpler binding code in many common

The robin-map library is a C++ implementation of a fast hash map and
hash set using open-addressing and linear robin hood hashing with
backward shift deletion to resolve collisions.
<<
# Info2
<<
