diff -Nurd a/jupyter_core/command.py b/jupyter_core/command.py
--- a/jupyter_core/command.py	2017-01-24 12:07:10.000000000 +0100
+++ b/jupyter_core/command.py	2019-04-03 02:38:05.000000000 +0200
@@ -26,7 +26,7 @@
         
         Avoids searching PATH for subcommands unless help output is requested.
         """
-        return 'Available subcommands: %s' % ' '.join(list_subcommands())
+        return 'Available subcommands: %s' % ' '.join(list_subcommands(suffix=self.suffix))
     
     @epilog.setter
     def epilog(self, x):
@@ -53,16 +53,18 @@
         help="show all Jupyter paths. Add --json for machine-readable format.")
     parser.add_argument('--json', action='store_true',
         help="output paths as machine-readable json")
-    
+    parser.suffix = ''
+
     return parser
 
 
-def list_subcommands():
+def list_subcommands(suffix=''):
     """List all jupyter subcommands
     
-    searches PATH for `jupyter-name`
+    searches PATH for `jupyter-name[suffix]`
     
-    Returns a list of jupyter's subcommand names, without the `jupyter-` prefix.
+    Returns a list of jupyter's subcommand names, without the `jupyter-` prefix
+    and (optional) suffix.
     Nested children (e.g. jupyter-sub-subsub) are not included.
     """
     subcommand_tuples = set()
@@ -73,11 +75,11 @@
         except OSError:
             continue
         for name in names:
-            if name.startswith('jupyter-'):
+            if name.startswith('jupyter-') and name.endswith(suffix):
                 if sys.platform.startswith('win'):
                     # remove file-extension on Windows
                     name = os.path.splitext(name)[0]
-                subcommand_tuples.add(tuple(name.split('-')[1:]))
+                subcommand_tuples.add(tuple(name.rstrip(suffix).split('-')[1:]))
     # build a set of subcommand strings, excluding subcommands whose parents are defined
     subcommands = set()
     # Only include `jupyter-foo-bar` if `jupyter-foo` is not already present
@@ -140,12 +142,18 @@
 
 def main():
     _path_with_self() # ensure executable is on PATH
+    pyv = os.path.realpath(sys.argv[0]).split('-py')
+    if len(pyv) > 1:
+        suffix = '-py' + pyv[-1]
+    else:
+        suffix = ''
     if len(sys.argv) > 1 and not sys.argv[1].startswith('-'):
         # Don't parse if a subcommand is given
         # Avoids argparse gobbling up args passed to subcommand, such as `-h`.
         subcommand = sys.argv[1]
     else:
         parser = jupyter_parser()
+        parser.suffix = suffix
         args, opts = parser.parse_known_args()
         subcommand = args.subcommand
         if args.version:
@@ -181,7 +189,8 @@
         parser.print_usage(file=sys.stderr)
         sys.exit("subcommand is required")
     
-    command = 'jupyter-' + subcommand
+    command = 'jupyter-' + subcommand + suffix
+
     try:
         _execvp(command, sys.argv[1:])
     except OSError as e:
