Info2: <<
Package: fasteners-py%type_pkg[python]
Version: 0.15
Revision: 6
Distribution: <<
	(%type_pkg[python] = 34 ) 10.9,
	(%type_pkg[python] = 34 ) 10.10,
	(%type_pkg[python] = 34 ) 10.11,
	(%type_pkg[python] = 34 ) 10.12,
	(%type_pkg[python] = 34 ) 10.13,
	(%type_pkg[python] = 34 ) 10.14,
	(%type_pkg[python] = 34 ) 10.14.5,
	(%type_pkg[python] = 34 ) 10.15,
	(%type_pkg[python] = 35 ) 10.9,
	(%type_pkg[python] = 35 ) 10.10,
	(%type_pkg[python] = 35 ) 10.11,
	(%type_pkg[python] = 35 ) 10.12,
	(%type_pkg[python] = 35 ) 10.13,
	(%type_pkg[python] = 35 ) 10.14,
	(%type_pkg[python] = 35 ) 10.14.5,
	(%type_pkg[python] = 35 ) 10.15,
	(%type_pkg[python] = 36 ) 10.9,
	(%type_pkg[python] = 36 ) 10.10,
	(%type_pkg[python] = 36 ) 10.11,
	(%type_pkg[python] = 36 ) 10.12,
	(%type_pkg[python] = 36 ) 10.13,
	(%type_pkg[python] = 36 ) 10.14,
	(%type_pkg[python] = 36 ) 10.14.5,
	(%type_pkg[python] = 36 ) 10.15
<<

Type: python (2.7 3.4 3.5 3.6 3.7 3.8)

Description: Python package providing useful locks
License: BSD
Homepage: https://pypi.org/project/fasteners
Maintainer: Scott Hannahs <shannahs@users.sourceforge.net>

Depends: python%type_pkg[python], six-py%type_pkg[python], monotonic-py%type_pkg[python]
BuildDepends: setuptools-tng-py%type_pkg[python]

Source: https://files.pythonhosted.org/packages/source/f/fasteners/fasteners-%v.tar.gz
Source-Checksum: SHA256(3a176da6b70df9bb88498e1a18a9e4a8579ed5b9141207762368a1017bf8f5ef)

CompileScript: <<
  %p/bin/python%type_raw[python] setup.py build
<<

InfoTest: <<
	  TestDepends: testtools-py%type_pkg[python]
	  TestScript: %p/bin/python%type_raw[python] setup.py test
<<

InstallScript: %p/bin/python%type_raw[python] setup.py install --prefix=%p --root=%d
DocFiles: ChangeLog LICENSE PKG-INFO README.rst

DescDetail: <<
Overview
  A python package that provides useful locks.

It includes the following.

Locking decorator
  Helpful locked decorator (that acquires instance objects lock(s) and acquires
    on method entry and releases on method exit).
Reader-writer locks
  Multiple readers (at the same time).
  Single writers (blocking any readers).
  Helpful read_locked and write_locked decorators.
Inter-process locks
  Single writer using file based locking (these automatically release on 
    process exit, even if __release__ or __exit__ is never called).
  Helpful interprocess_locked decorator.
Generic helpers
  A try_lock helper context manager that will attempt to acquire a given lock 
   and provide back whether the attempt passed or failed (if it passes, then 
   further code in the context manager will be ran with the lock acquired).
<<
<<
