Info2: <<
Package: kiwisolver-py%type_pkg[python]
Version: 1.1.0
Revision: 1
Distribution: <<
	(%type_pkg[python] = 34 ) 10.9,
	(%type_pkg[python] = 34 ) 10.10,
	(%type_pkg[python] = 34 ) 10.11,
	(%type_pkg[python] = 34 ) 10.12,
	(%type_pkg[python] = 34 ) 10.13,
	(%type_pkg[python] = 34 ) 10.14,
	(%type_pkg[python] = 34 ) 10.14.5,
	(%type_pkg[python] = 34 ) 10.15,
	(%type_pkg[python] = 35 ) 10.9,
	(%type_pkg[python] = 35 ) 10.10,
	(%type_pkg[python] = 35 ) 10.11,
	(%type_pkg[python] = 35 ) 10.12,
	(%type_pkg[python] = 35 ) 10.13,
	(%type_pkg[python] = 35 ) 10.14,
	(%type_pkg[python] = 35 ) 10.14.5,
	(%type_pkg[python] = 35 ) 10.15,
	(%type_pkg[python] = 36 ) 10.9,
	(%type_pkg[python] = 36 ) 10.10,
	(%type_pkg[python] = 36 ) 10.11,
	(%type_pkg[python] = 36 ) 10.12,
	(%type_pkg[python] = 36 ) 10.13,
	(%type_pkg[python] = 36 ) 10.14,
	(%type_pkg[python] = 36 ) 10.14.5,
	(%type_pkg[python] = 36 ) 10.15
<<
Description: Fast Cassowary constraint solver
License: BSD
# Free to modify, update, and take over
Maintainer: Hanspeter Niederstrasser <nieder@users.sourceforge.net>
Type: python (2.7 3.4 3.5 3.6 3.7 3.8)
Depends: <<
	python%type_pkg[python]
<<
BuildDepends: <<
	setuptools-tng-py%type_pkg[python]
<<
Source: https://files.pythonhosted.org/packages/source/k/kiwisolver/kiwisolver-%v.tar.gz
Source-Checksum: SHA256(53eaed412477c836e1b9522c19858a8557d6e595077830146182225613b11a75)
#PatchScript: <<
#	# releases after 0.5.1 will include the LICENSE file
#	head -n 8 PKG-INFO > LICENSE
#<<
GCC: 4.0
CompileScript: <<
	%p/bin/python%type_raw[python] setup.py build
<<

InstallScript: <<
	%p/bin/python%type_raw[python] setup.py install --root %d
<<
DocFiles: releasenotes.rst README.rst
Homepage: https://github.com/nucleic/kiwi
DescDetail: <<
Kiwi is an efficient C++ implementation of the Cassowary constraint
solving algorithm. Kiwi is an implementation of the algorithm based on
the seminal Cassowary paper. It is not a refactoring of the original C++
solver. Kiwi has been designed from the ground up to be lightweight and
fast. Kiwi ranges from 10x to 500x faster than the original Cassowary
solver with typical use cases gaining a 40x improvement. Memory savings
are consistently > 5x.
<<
<<
