Info2: <<
Package: unidecode-py%type_pkg[python]
Version: 1.3.8
Revision: 1
Distribution: <<
	(%type_pkg[python] = 35 ) 10.9,
	(%type_pkg[python] = 35 ) 10.10,
	(%type_pkg[python] = 35 ) 10.11,
	(%type_pkg[python] = 35 ) 10.12,
	(%type_pkg[python] = 35 ) 10.13,
	(%type_pkg[python] = 35 ) 10.14,
	(%type_pkg[python] = 35 ) 10.14.5,
	(%type_pkg[python] = 35 ) 10.15,
	(%type_pkg[python] = 36 ) 10.9,
	(%type_pkg[python] = 36 ) 10.10,
	(%type_pkg[python] = 36 ) 10.11,
	(%type_pkg[python] = 36 ) 10.12,
	(%type_pkg[python] = 36 ) 10.13,
	(%type_pkg[python] = 36 ) 10.14,
	(%type_pkg[python] = 36 ) 10.14.5,
	(%type_pkg[python] = 36 ) 10.15
<<
Description: ASCII transliterations of Unicode text
Type: python (3.5 3.6 3.7 3.8 3.9 3.10)
License: BSD
# Free to update and take over
Maintainer: Hanspeter Niederstrasser <nieder@users.sourceforge.net>

Source: https://files.pythonhosted.org/packages/source/U/Unidecode/Unidecode-%v.tar.gz
Source-Checksum: SHA256(cfdb349d46ed3873ece4586b96aa75258726e2fa8ec21d6f00a591d98806c2f4)

Depends: <<
	python%type_pkg[python]
<<
BuildDepends: <<
	setuptools-tng-py%type_pkg[python]
<<
CompileScript: <<
	%p/bin/python%type_raw[python] setup.py build
<<
InfoTest: <<
	TestScript: %p/bin/python%type_raw[python] setup.py test || exit 2
<<
InstallScript: <<
	%p/bin/python%type_raw[python] setup.py install --root=%d
	mv %i/bin/unidecode %i/bin/unidecode-%type_raw[python]
<<
PostInstScript: <<
	update-alternatives --install %p/bin/unidecode unidecode %p/bin/unidecode-%type_raw[python] %type_pkg[python]
<<

PreRmScript: <<
	if [ $1 != "upgrade" ]; then
		update-alternatives --remove unidecode %p/bin/unidecode-%type_raw[python]
	fi
<<
DocFiles: LICENSE README.rst
Homepage: https://github.com/mk-fg/pretty-yaml
DescDetail: <<
It often happens that you have text data in Unicode, but you need to 
represent it in ASCII. For example when integrating with legacy code 
that doesn't support Unicode, or for ease of entry of non-Roman names 
on a US keyboard, or when constructing ASCII machine identifiers from 
human-readable Unicode strings that should still be somewhat 
intelligible (a popular example of this is when making an URL slug 
from an article title).
Unidecode takes Unicode data and tries to represent it in ASCII 
characters (i.e., the universally displayable characters between 0x00 
and 0x7F), where the compromises taken when mapping between two 
character sets are chosen to be near what a human with a US keyboard 
would choose. 
<<
<<
