Info2: <<

Package: ptyprocess-py%type_pkg[python]
Version: 0.6.0
Revision: 1
Type: python (2.7 3.4 3.5 3.6 3.7 3.8)
Description: Run a subprocess in a pseudo terminal
License: OSI-Approved
HomePage: https://pypi.python.org/pypi/ptyprocess
Maintainer: Scott Hannahs <shannahs@users.sourceforge.net>>

Depends: python%type_pkg[python]

Source: https://files.pythonhosted.org/packages/source/p/ptyprocess/ptyprocess-%v.tar.gz
Source-MD5: 37402d69f3b50913d4d483587bffad8f

CompileScript: <<
#!/bin/sh -ex
'%p/bin/python%type_raw[python]' setup.py build
<<

InstallScript: <<
#!/bin/sh -ex
'%p/bin/python%type_raw[python]' setup.py install \
    --optimize=2 \
    '--prefix=%p' \
    '--root=%d'
<<

DocFiles: README.rst LICENSE PKG-INFO
DescDetail: <<
From https://pypi.python.org/pypi/ptyprocess

Launch a subprocess in a pseudo terminal (pty), and interact with both the
process and its pty.

Sometimes, piping stdin and stdout is not enough. There might be a password
prompt that doesn't read from stdin, output that changes when it's going to
a pipe rather than a terminal, or curses-style interfaces that rely on a
terminal. If you need to automate these things, running the process in a
pseudo terminal (pty) is the answer.

Interface:

p = PtyProcessUnicode.spawn(['python'])
p.read(20)
p.write('6+6\n')
p.read(20)
<<
<<
