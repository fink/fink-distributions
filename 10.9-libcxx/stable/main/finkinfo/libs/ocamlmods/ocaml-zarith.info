Package: ocaml-zarith
Version: 1.12
Revision: 1
Description: Ocaml arithmetic library
License: LGPL2
Maintainer: None <fink-devel@lists.sourceforge.net>
BuildDepends: <<
	fink (>= 0.28),
	fink-package-precedence,
	camlp5,
	gmp5,
	ocaml (>= 4.12)
<<
Depends: <<
	gmp5-shlibs,
	ocaml (>= 4.12)
<<
UseMaxBuildJobs: false
Source: https://github.com/ocaml/Zarith/archive/refs/tags/release-%v.tar.gz
SourceRename: zarith-%v.tar.gz
SourceDirectory: Zarith-release-%v
Source-Checksum: SHA256(cc32563c3845c86d0f609c86d83bf8607ef12354863d31d3bffc0dacf1ed2881)
PatchScript: <<
	# Give it a dummy ld.conf file to edit and we'll edit it manually in PostInstScript
	perl -pi -e 's|zarith META|$& -ldconf %i/lib/ocaml/ld.conf|g' project.mak
<<
SetCFLAGS: -MD
CompileScript: <<
	./configure --installdir %i/lib/ocaml --ocamllibdir %p/lib/ocaml
	make
	fink-package-precedence --depfile-ext='\.d' .
<<
InfoTest: <<
	TestScript: make tests || exit 2
<<
InstallScript: <<
	mkdir -p %i/lib/ocaml/zarith
	make install prefix=%d
	install_name_tool -id %p/lib/ocaml/zarith/dllzarith.so %i/lib/ocaml/zarith/dllzarith.so
	# we don't want to overwrite the already installed file
	rm -f %i/lib/ocaml/ld.conf
<<
Shlibs: <<
	!%p/lib/ocaml/zarith/dllzarith.so
<<
PostInstScript: <<
  if ! /usr/bin/grep -q "%p/lib/ocaml/zarith" "%p/lib/ocaml/ld.conf"; then
    echo "%p/lib/ocaml/zarith" >> "%p/lib/ocaml/ld.conf"
  fi
<<
PreRmScript: <<
  /usr/bin/grep -v "%p/lib/ocaml/zarith" "%p/lib/ocaml/ld.conf" > "%p/lib/ocaml/ld.conf.tmp"
  /bin/mv "%p/lib/ocaml/ld.conf.tmp" "%p/lib/ocaml/ld.conf"
<<
DocFiles: LICENSE README.md
Homepage: https://github.com/ocaml/Zarith
DescDetail: <<
This library implements arithmetic and logical operations over
arbitrary-precision integers.

The module is simply named Z. Its interface is similar to that of the
Int32, Int64 and Nativeint modules from the OCaml standard library, with
some additional functions. See the file z.mlip for documentation.

The implementation uses GMP (the GNU Multiple Precision arithmetic
library) to compute over big integers. However, small integers are
represented as unboxed Caml integers, to save space and improve
performance. Big integers are allocated in the Caml heap, bypassing
GMP's memory management and achieving better GC behavior than e.g. the
MLGMP library. Computations on small integers use a special, faster path
(in C or OCaml) eschewing calls to GMP, while computations on large
intergers use the low-level MPN functions from GMP.

Arbitrary-precision integers can be compared correctly using OCaml's
polymorphic comparison operators (=, <, >, etc.).
<<
