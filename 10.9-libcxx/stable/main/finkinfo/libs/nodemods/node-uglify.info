Package: node-uglify
Version: 2.8.29
Revision: 8.2
###
BuildDepends: <<
	fink (>= 0.32),
	node-async,
	node-optimist,
	help2man
<<
Depends: <<
	node-yargs,
	nodejs
<<
Recommends: <<
	node-source-map
<<
Suggests: <<
	node-acorn,
	node-uglify-to-browserify
<<
Provides: <<
	uglifyjs
<<
Conflicts: <<
	node-uglify-js
<<
Replaces: <<
	node-uglify-js
<<
###
Source: mirror:debian:/pool/main/u/uglifyjs/uglifyjs_%v.orig.tar.gz
Source-Checksum: SHA256(7c7d134e16b3a3246f52b9a71d546aecc6fc9c470fc9797714e0720e0e6d7812)
SourceDirectory: UglifyJS2-%v
Source2: mirror:debian:pool/main/u/uglifyjs/uglifyjs_%v-8.debian.tar.xz
Source2-Checksum: SHA256(31313a0a69450668ed3d0cac0b3aad690f2ff357adb3d66be0bb85d0eaf11348)
Source2ExtractDir: UglifyJS2-%v
###
PatchScript: <<
patch -p1 < debian/patches/1001_break_dep_loop.patch
patch -p1 < debian/patches/1002_avoid_timeout_in_tests.patch
patch -p1 < debian/patches/1003_fix_manpage_help_output.patch
patch -p1 < debian/patches/2002_node_conflict.patch
patch -p1 < debian/patches/adapt-test-to-status-quo.patch

perl -pi -e 's,\/usr\/bin\/nodejs,%p/bin/nodejs,g' bin/uglifyjs
<<
###
DocFiles: README.md LICENSE
###
CompileScript: <<
nodejs bin/uglifyjs \
	--self \
	--comments /Copyright/ \
	--output debian/uglify.js

NODE_PATH=lib help2man \
	--name="JavaScript parser, mangler/compressor and beautifier toolkit" \
	--no-info \
	--output=debian/uglifyjs.1 \
	bin/uglifyjs \
	|| { NODE_PATH=lib bin/uglifyjs --help; false; }
<<
# No tests as it will cause a circdep
#InfoTest: <<
#	TestDepends: <<
#		mocha,
#		node-escodegen,
#		node-estraverse
#	<<
#	TestScript: <<
#TERM=dumb NODE_PATH=lib nodejs test/run-tests.js
#	<<
#<<
InstallScript: <<
install -d -m0755 %i/lib/nodejs/uglify-js
cp -R lib %i/lib/nodejs/uglify-js/
cp -R bin %i/lib/nodejs/uglify-js/
cp -R tools %i/lib/nodejs/uglify-js/
install -m0644 package.json %i/lib/nodejs/uglify-js/
install -d -m0755 %i/bin
ln -s %p/lib/nodejs/uglify-js/bin/uglifyjs %i/bin/uglifyjs

install -d -m0755 %i/share/man/man1
install -m0644 debian/uglifyjs.1 %i/share/man/man1
<<
###
SplitOff: <<
	Package: libjs-uglify
	DocFiles: README.md
	InstallScript: <<
install -d -m0755 %i/share/javascript/ugligyjs
install -m0644 debian/uglify.js %i/share/javascript/ugligyjs/
	<<
	Description: UglifyJS in library form
	DescDetail: <<
UglifyJS is a JavaScript compressor/minifier written in JavaScript. It
also contains tools that allow one to automate working with JavaScript
code:
.
 * A parser which produces an abstract syntax tree (AST) from
   JavaScript code.
 * A code generator which outputs JavaScript code from an AST, also
   providing the option to get a source map.
 * A compressor (optimizer) - it uses the transformer API to optimize
   an AST into a smaller one.
 * A mangler - reduce names of local variables to (usually)
   single-letters.
 * A scope analyzer, which is a tool that augments the AST with
   information about where variables are defined/referenced etc.
 * A tree walker - a simple API allowing you to do something on every
   node in the AST.
 * A tree transformer - another API intended to transform the tree.
.
All the above utilities and APIs are defined in ~6500 lines of code
(except for the effective generation of the source-map, which is
handled by the source-map module). Compared to alternatives, UglifyJS
is pretty small.
.
This package provides UglifyJS in library form for use by other Javascript
packages and web applications.
.
NB! This package is deprecated!
Please consider using libjs-uglify-js instead.
	<<
<<
###
Description: JavaScript parser/compressor/beautifier
DescDetail: <<
UglifyJS is a JavaScript compressor/minifier written in JavaScript. It
also contains tools that allow one to automate working with JavaScript
code:
.
 * A parser which produces an abstract syntax tree (AST) from
   JavaScript code.
 * A code generator which outputs JavaScript code from an AST, also
   providing the option to get a source map.
 * A compressor (optimizer) - it uses the transformer API to optimize
   an AST into a smaller one.
 * A mangler - reduce names of local variables to (usually)
   single-letters.
 * A scope analyzer, which is a tool that augments the AST with
   information about where variables are defined/referenced etc.
 * A tree walker - a simple API allowing you to do something on every
   node in the AST.
 * A tree transformer - another API intended to transform the tree.
.
All the above utilities and APIs are defined in ~6500 lines of code
(except for the effective generation of the source-map, which is
handled by the source-map module). Compared to alternatives, UglifyJS
is pretty small.
<<
###
License: BSD
Homepage: http://lisperator.net/uglifyjs/
Maintainer: Justin F. Hallett <thesin@users.sourceforge.net>
