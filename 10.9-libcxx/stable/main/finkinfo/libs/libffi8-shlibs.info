# -*- coding: ascii; tab-width: 4 -*-
Package: libffi8-shlibs
Version: 3.4.4
Revision: 1
Description: Foreign Function Interface
License: BSD
Maintainer: None <fink-devel@lists.sourceforge.net>
Source: https://github.com/libffi/libffi/releases/download/v%v/libffi-%v.tar.gz
Source-Checksum: SHA256(d66c56ad259a82cf2a9dfc408b32bf5da52371500b84745f7fb8b645712df676)
PatchScript: <<
	perl -pi -e 's;-dynamiclib -Wl,-single_module;$& -Wl,-x -dead_strip;' configure
<<
ConfigureParams: --disable-static
# Tests currently broken, due at least in part to dejagnu choking on clang:
#      https://github.com/fink/fink-distributions/issues/134
#      http://lists.gnu.org/archive/html/bug-dejagnu/2016-12/msg00000.html
#      https://lists.gnu.org/archive/html/bug-dejagnu/2020-11/msg00009.html
#InfoTest: <<
#	TestDepends: dejagnu
#	TestSuiteSize: medium
#	TestScript: make -k check || exit 2
#<<
InstallScript: <<
	make install DESTDIR=%d
<<
Shlibs: %p/lib/libffi.8.dylib 10.0.0 %n (>= 3.4.4-1)
SplitOff: <<
	Package: libffi8
	Depends: %N (= %v-%r)
	BuildDependsOnly: true
	Conflicts: <<
		libffi,
		libffi6,
		libffi8
	<<
	Replaces: <<
		libffi,
		libffi6,
		libffi8
	<<
	Files: <<
		include
		lib/libffi.dylib
		lib/libffi.la
		lib/pkgconfig
		share/info
		share/man
	<<
	DocFiles: ChangeLog* LICENSE* README.md
	InfoDocs: %p/share/info/libffi.info
<<
DocFiles: ChangeLog* LICENSE* README.md
HomePage: https://sourceware.org/libffi/
DescDetail: <<
Compilers for high level languages generate code that follows certain
conventions. These conventions are necessary, in part, for separate
compilation to work. One such convention is the "calling convention".
The "calling convention" is a set of assumptions made by the compiler
about where function arguments will be found on entry to a function. A
"calling convention" also specifies where the return value for a
function is found.

Some programs may not know at the time of compilation what arguments are
to be passed to a function. For instance, an interpreter may be told at
run-time about the number and types of arguments used to call a given
function. Libffi can be used in such programs to provide a bridge from
the interpreter program to compiled code.

The libffi library provides a portable, high level programming interface
to various calling conventions. This allows a programmer to call any
function specified by a call interface description at run-time.

FFI stands for Foreign Function Interface. A foreign function interface
is the popular name for the interface that allows code written in one
language to call code written in another language. The libffi library
really only provides the lowest, machine dependent layer of a fully
featured foreign function interface. A layer must exist above libffi
that handles type conversions for values passed between the two
languages.
<<
