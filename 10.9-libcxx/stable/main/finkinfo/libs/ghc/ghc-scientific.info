Package: ghc-scientific
Version: 0.3.3.8
Revision: 2
Source: http://hackage.haskell.org/package/scientific-%v/scientific-%v.tar.gz
Source-MD5: a202d9ab282b36e1e4288e4cd8536699
SourceDirectory: scientific-%v

Depends: <<
  ghc (>= 7.10.3-1), ghc (<< 7.10.4-1),
  ghc-hashable (>= 1.1.2-1), ghc-hashable (<< 1.3-1),
  ghc-text (>= 0.8-1), ghc-text (<< 1.3-1)
<<

Shlibs: <<
  @rpath/libHSscientific-0.3.3.8-0lnEGtxOJc8ENw4sPj9E5N-ghc7.10.3.dylib 0.0.0 %n (>= 0.3.3.8-1)
<<

CompileScript: <<
runghc Setup.hs configure --prefix=%p --docdir=%p/share/doc/%n
runghc Setup.hs build
runghc Setup.hs haddock
runghc Setup.hs register --gen-script
runghc Setup.hs unregister --gen-script
<<
InstallScript: runghc Setup.hs copy --destdir=%d

DocFiles: LICENSE register.sh unregister.sh

PostInstScript: %p/share/doc/%n/register.sh
PreRmScript: sh %p/share/doc/%n/unregister.sh --force

Description: Space efficient arbitrary precision type
DescDetail: <<
Data.Scientific provides a space efficient and arbitrary precision
scientific number type.

Scientific numbers are represented using scientific notation. It uses
a coefficient c :: Integer and a base-10 exponent e :: Int (do note
that since we're using an Int to represent the exponent these numbers
aren't truly arbitrary precision). A scientific number corresponds to
the Fractional number: fromInteger c * 10 ^^ e.

The main application of Scientific is to be used as the target of
parsing arbitrary precision numbers coming from an untrusted source.
<<
Homepage: http://hackage.haskell.org/package/scientific
License: BSD
Maintainer: Brendan Cully <fink@brendan.cully.org>
