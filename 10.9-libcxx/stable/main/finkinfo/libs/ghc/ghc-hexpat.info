Package: ghc-hexpat
Version: 0.20.9
Revision: 2
Source: http://hackage.haskell.org/package/hexpat-%v/hexpat-%v.tar.gz
Source-Checksum: SHA256(5d1c075f1ae00be2e80c0018b522a351b2f4ef73b9baca1113ee80e554449d9d)
SourceDirectory: hexpat-%v

BuildDepends: <<
  fink (>= 0.38.3),
  ghc (>= 7.10.3-1), ghc (<< 7.10.3.1-1)
<<

Depends: <<
  ghc (>= 7.10.3-1), ghc (<< 7.10.3.1-1),
  ghc-list (>= 0.4.2-1), ghc-list (<< 0.6-1),
  ghc-text (>= 0.5.0.0-1), ghc-text (<< 1.3.0.0-1),
  ghc-utf8-string (>= 0.3-1), ghc-utf8-string (<< 1.1-1)
<<

CompileScript: <<
runghc Setup.lhs configure --prefix=%p --docdir=%p/share/doc/%n
runghc Setup.lhs build
runghc Setup.lhs haddock
runghc Setup.lhs register --gen-script
runghc Setup.lhs unregister --gen-script
<<
InstallScript: runghc Setup.lhs copy --destdir=%d

Shlibs: <<
  @rpath/libHShexpat-0.20.9-DywMzFItO2QGQc37pW3arv-ghc7.10.3.dylib 0.0.0 %n (>= 0.20.9-1)
<<

DocFiles: LICENSE register.sh unregister.sh

PostInstScript: %p/share/doc/%n/register.sh
PreRmScript: sh %p/share/doc/%n/unregister.sh --force

Description: XML parser/formatter based on expat
DescDetail: <<
This package provides a general purpose Haskell XML library using
Expat to do its parsing (http://expat.sourceforge.net/ - a fast
stream-oriented XML parser written in C). It is extensible to any
string type, with String, ByteString and Text provided out of the box.

Basic usage: Parsing a tree (Tree), formatting a tree (Format). Other
features: Helpers for processing XML trees (Proc), trees annotated
with XML source location (Annotated), extended XML trees with
comments, processing instructions, etc (Extended), XML cursors
(Cursor), SAX-style parse (SAX), and access to the low-level interface
in case speed is paramount (Internal.IO).

The design goals are speed, speed, speed, interface simplicity and
modularity.

For introduction and examples, see the Text.XML.Expat.Tree module. For
benchmarks, http://haskell.org/haskellwiki/Hexpat/

If you want to do interactive I/O, an obvious option is to use lazy
parsing with one of the lazy I/O functions such as
hGetContents. However, this can be problematic in some applications
because it doesn't handle I/O errors properly and can give no
guarantee of timely resource cleanup. Because of the generalized list,
Hexpat is designed to allow for chunked I/O, but as of this writing I
haven't done a nice integration with enumerator and friends.

IO is filed under Internal because it's low-level and most users won't
want it. The other Internal modules are re-exported by Annotated, Tree
and Extended, so you won't need to import them directly.
<<
Homepage: http://hackage.haskell.org/package/hexpat
License: BSD
Maintainer: None <fink-devel@lists.sourceforge.net>
