Info2: <<

Package: cran-mcmc-r%type_pkg[rversion]
Distribution: <<
	(%type_pkg[rversion] = 31 ) 10.9,
	(%type_pkg[rversion] = 31 ) 10.10,
	(%type_pkg[rversion] = 31 ) 10.11,
	(%type_pkg[rversion] = 31 ) 10.12,
	(%type_pkg[rversion] = 32 ) 10.9,
	(%type_pkg[rversion] = 32 ) 10.10,
	(%type_pkg[rversion] = 32 ) 10.11,
	(%type_pkg[rversion] = 32 ) 10.12
<<
Type: rversion (3.4 3.3 3.2 3.1)
Version: 0.9-5
Revision: 1
Description: Markov Chain Monte Carlo
Homepage: http://cran.r-project.org/web/packages/mcmc/index.html
License: BSD
Maintainer: None <fink-devel@lists.sourceforge.net>
Source: http://cran.r-project.org/src/contrib/mcmc_%v.tar.gz
Source-MD5: b935c93882c1ea87c90dd7e562fb6ade
SourceDirectory: mcmc
Depends: <<
	fink (>= 0.27.2),
	r-base%type_pkg[rversion]
<<
BuildDepends: <<
	fink (>= 0.27.2),
	r-base%type_pkg[rversion]-dev
<<
CompileScript: <<
  #!/bin/sh -ev
  export TMPDIR=%b/tmp
  BIN_R=%p/Library/Frameworks/R.framework/Versions/%type_raw[rversion]/Resources/bin/R
  
  pushd ..
  $BIN_R --verbose CMD build --no-build-vignettes mcmc
<<
InstallScript: <<
  #!/bin/sh -ev
  BIN_R=%p/Library/Frameworks/R.framework/Versions/%type_raw[rversion]/Resources/bin/R
  
  mkdir -p %i/lib/R/%type_raw[rversion]/site-library
  pushd %b/.. && $BIN_R --verbose CMD INSTALL --library=%i/lib/R/%type_raw[rversion]/site-library mcmc
  if (( $(echo "%type_raw[rversion] > 3.3" |bc -l) )); then
	  install_name_tool -id %p/lib/R/%type_raw[rversion]/site-library/mcmc/libs/mcmc.so %i/lib/R/%type_raw[rversion]/site-library/mcmc/libs/mcmc.so
  else
	  install_name_tool -id %p/lib/R/%type_raw[rversion]/site-library/mcmc/libs/mcmc.dylib %i/lib/R/%type_raw[rversion]/site-library/mcmc/libs/mcmc.dylib
  fi
<<
Shlibs: <<
  ( %type_raw[rversion] >= 3.4 ) %p/lib/R/%type_raw[rversion]/site-library/mcmc/libs/mcmc.so 0.0.0 %n (>=0.9-5-1)
  ( %type_raw[rversion] << 3.4 ) %p/lib/R/%type_raw[rversion]/site-library/mcmc/libs/mcmc.dylib 0.0.0 %n (>=0.9-5-1)
<<
DescDetail: <<
Simulates continuous distributions of random vectors using Markov 
chain Monte Carlo (MCMC). Users specify the distribution by an R 
function that evaluates the log unnormalized density. Algorithms 
are random walk Metropolis algorithm (function metrop), simulated 
tempering (function temper), and morphometric random walk 
Metropolis (Johnson and Geyer, Annals of Statistics, 2012, function 
morph.metrop), which achieves geometric ergodicity by change of 
variable.
<<

<<
