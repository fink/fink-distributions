Info3: <<
Package: devel-cover-pm%type_pkg[perl]
Version: 1.08
Revision: 7
License: Artistic
Description: Code coverage metrics
DescDetail: <<
This module provides code coverage metrics for Perl. Code coverage
metrics describe how thoroughly tests exercise code. By using
Devel::Cover you can discover areas of code not exercised by your
tests and determine which tests to create to increase coverage. Code
coverage can be considered an indirect measure of quality.

Although it is still being developed, Devel::Cover is now quite stable
and provides many of the features to be expected in a useful coverage
tool.

Statement, branch, condition, subroutine, and pod coverage information
is reported. Statement and subroutine coverage data should be
accurate. Branch and condition coverage data should be mostly accurate
too, although not always what one might initially expect. Pod coverage
comes from Pod::Coverage. If Pod::Coverage::CountParents is available
it will be used instead. Coverage data for other criteria are not yet
collected.

The cover program can be used to generate coverage
reports. Devel::Cover ships with a number of different reports
including various types of HTML output, textual reports, a report to
display missing coverage in the same format as compilation errors and
a report to display coverage information within the Vim editor.

It is possible to add annotations to reports, for example you can add
a column to an HTML report showing who last changed a line, as
determined by git blame. Some annotation modules are shipped with
Devel::Cover and you can easily create your own.

The gcov2perl program can be used to convert gcov files to
Devel::Cover databases. This allows you to display your C or XS code
coverage together with your Perl coverage, or to use any of the
Devel::Cover reports to display your C coverage data.

Code coverage data are collected by replacing perl ops with functions
which count how many times the ops are executed. These data are then
mapped back to reality using the B compiler modules. There is also a
statement profiling facility which should not be relied on. For proper
profiling use Devel::NYTProf. Previous versions of Devel::Cover
collected coverage data by replacing perl's runops function. It is
still possible to switch to that mode of operation, but this now gets
little testing and will probably be removed soon. You probably don't
care about any of this.
<<
Maintainer: Jesse Alama <jesse.alama@gmail.com>
Homepage: http://search.cpan.org/dist/Devel-Cover
Source: mirror:cpan:authors/id/P/PJ/PJCJ/Devel-Cover-%v.tar.gz
Source-MD5: 31a37231dfc5b9d0ce496519bc99a029

Type: perl (5.16.2 5.18.2)
Distribution: <<
	(%type_pkg[perl] = 5162) 10.9,
	(%type_pkg[perl] = 5162) 10.10,
	(%type_pkg[perl] = 5162) 10.11,
	(%type_pkg[perl] = 5162) 10.12
<<
UpdatePOD: true

DocFiles: README

Depends: <<
  perl%type_pkg[perl]-core,
  version-pm%type_pkg[perl],
  test-warn-pm,
  digest-md5-pm%type_pkg[perl],
  pod-coverage-pm,
  template-pm%type_pkg[perl],
  test-differences-pm,
  parallel-iterator-pm%type_pkg[perl],
  ppi-html-pm%type_pkg[perl],
  perl-tidy,
  digest-md5-pm%type_pkg[perl],
  json-pm%type_pkg[perl],
  json-pp-pm,
  test-perl-critic-pm%type_pkg[perl],
  sub-uplevel-pm,
  tree-dag-node-pm,
<<

InstallScript: <<
  %{default_script}
  /bin/mv %i/share/man %i/lib/perl5/%type_raw[perl]
  /bin/mv %i/bin/cover %i/bin/cover-%type_raw[perl]
  /bin/mv %i/bin/cpancover %i/bin/cpancover-%type_raw[perl]
  /bin/mv %i/bin/gcov2perl %i/bin/gcov2perl-%type_raw[perl]
<<
<<
