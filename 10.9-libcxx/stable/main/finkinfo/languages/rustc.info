Package: rustc
Version: 1.78.0
Revision: 1
Architecture: x86_64
Description: Safe Fast System Programming Language
Maintainer: None <fink-devel@lists.sourceforge.net>
License: BSD

Conflicts: rust (<< 1.11.0-2)
Replaces: rust (<< 1.11.0-2)

Source: https://static.rust-lang.org/dist/rustc-%v-src.tar.xz
Source-Checksum: SHA256(8065824f0255faa3901db8206e6f9423f6f8c07cec28bc6f2797c6c948310ece)
SourceDirectory: rustc-%v-src

# derived from src/stage0.json
Source2: https://static.rust-lang.org/dist/2024-03-21/rust-std-1.77.0-%m-apple-darwin.tar.xz
Source2-Checksum: SHA256(95692e654b5ea16514b0d5558707b28c497b5c262c0d7c711d46e03033509f8c)
# prevent automatic unpacking
Source2Rename: rust-std-1.77.0-%m-apple-darwin.tar.xz.nounpack

Source3: https://static.rust-lang.org/dist/2024-03-21/rustc-1.77.0-%m-apple-darwin.tar.xz
Source3-Checksum: SHA256(0bae384047cdb64200f4e87f8564238542504b45181870900f57745932c49d79)
Source3Rename: rustc-1.77.0-%m-apple-darwin.tar.xz.nounpack

Source4: https://static.rust-lang.org/dist/2024-03-21/cargo-1.77.0-%m-apple-darwin.tar.xz
Source4-Checksum: SHA256(c95b98a306b26bf5f4f43d4d212c4535f3a09bbeda569ea0431bc54824a267b4)
Source4Rename: cargo-bootstrap-1.77.0-%m-apple-darwin.tar.xz.nounpack

# uses liblzma5 at link time but then strips symbols?
BuildDepends: <<
	cmake,
	fink (>= 0.32),
	libcurl4,
	liblzma5,
	python310,
	openssl300-dev,
	pkgconfig
<<
Depends: <<
	libcurl4-shlibs,
	libgit2-1.7-shlibs,
	openssl300-shlibs
<<
Suggests: <<
	cargo,
	python310
<<
# insists on using system-libiconv headers, but fink-libiconv.dylib
# If find way to add %p/include to internal CPPFLAGS, promote this to Dep/BDep instead.
BuildConflicts: <<
	libiconv-dev
<<

PatchScript: <<
#!/bin/sh -ev
cat > config.toml <<EOF
profile = "dist"
change-id = 121754 # does this need to be changed every %v bump?

[llvm]
cflags = "-I%p/include"
cxxflags = "-I%p/include"
ldflags = "-L%p/lib"
# generate a dylib for internal LLVM (smaller downstream binaries)
link-shared = true

[build]
vendor = true
python = "%p/bin/python3.10"
#extended = true
verbose = 1

[install]
prefix = "%p"
sysconfdir = "etc"

[rust]
codegen-units = 0
channel = "stable"
description = "Fink/%v-%r"
rpath = false
EOF

# these are from Debian
# don't care about lock changes
#rm -f Cargo.lock src/bootstrap/Cargo.lock src/tools/rust-analyzer/Cargo.lock src/tools/cargo/Cargo.lock
# Link against system liblzma,
# see https://github.com/alexcrichton/xz2-rs/issues/16
# https://doc.rust-lang.org/cargo/reference/build-scripts.html
# and update the checksum
cat > vendor/lzma-sys/build.rs <<EOF
fn main() {
    println!("cargo:rustc-link-search=%p/lib");
    println!("cargo:rustc-link-lib=lzma");
}
EOF
# final SHASUM is variable because %p gets resolved
SHASUM=`shasum -a 256 vendor/lzma-sys/build.rs | cut -f 1 -d ' '`
perl -pi -e "s|052d600babd2f95d9549f2b846e6dcf1e39b1c15d4fa6a293797ce1c85199e24|$SHASUM|g" vendor/lzma-sys/.cargo-checksum.json

<<
GCC: 4.0
CompileScript: <<
#!/bin/sh -ev
export TARGET_CFLAGS=$CFLAGS
export TARGET_CXXFLAGS=$CPPFLAGS
export TARGET_CPPFLAGS=$CPPFLAGS
export TARGET_LDFLAGS=$LDFLAGS
#unset CFLAGS CXXFLAGS CPPFLAGS LDFLAGS

export LIBSSH2_SYS_USE_PKG_CONFIG=1

export PYTHON=%p/bin/python3.10

CACHEDIR=build/cache/2024-03-21

mkdir -p $CACHEDIR
mv ../rust-std-1.77.0-%m-apple-darwin.tar.xz.nounpack $CACHEDIR/rust-std-1.77.0-%m-apple-darwin.tar.xz
mv ../rustc-1.77.0-%m-apple-darwin.tar.xz.nounpack $CACHEDIR/rustc-1.77.0-%m-apple-darwin.tar.xz
mv ../cargo-bootstrap-1.77.0-%m-apple-darwin.tar.xz.nounpack $CACHEDIR/cargo-1.77.0-%m-apple-darwin.tar.xz

$PYTHON ./x.py dist
<<
InstallScript: <<
#!/bin/sh -ev
  export PYTHON=%p/bin/python3.10
  DESTDIR=%d $PYTHON ./x.py install

  mv %i/share/doc/docs %i/share/doc/rust-doc
  
  for tgt in %i/bin/* %i/lib/*.dylib %i/lib/rustlib/%m-apple-darwin/lib/*.dylib %i/libexec/* 
  do
    # lib path is in build tree
    for lib in $(otool -L $tgt | grep %b | awk '{print $1}')
    do
      install_name_tool -change $lib %p/lib/$(basename $lib) $tgt
    done
    # @rpath -> full path
    for lib in $(otool -L $tgt | grep rpath | awk '{print $1}')
    do
      install_name_tool -change $lib %p/lib/$(basename $lib) $tgt
    done
  done

  for tgt in %i/lib/*.dylib
  do
    install_name_tool -id %p/lib/$(basename $tgt) $tgt
  done

  # https://github.com/rust-lang/rust/issues/39870
  # it turns out that the libraries in rustlib are meant to point to
  # the same shared lib as in the root, and bad things happen if
  # a binary ends up linking to both copies. So just replace the
  # rustlib version with a symlink to the parent.
  for tgt in %i/lib/rustlib/%m-apple-darwin/lib/*.dylib
  do
    lib=$(basename $tgt)
    if [ -f %i/lib/$lib ]
    then
      ln -sf %p/lib/$lib $tgt
    fi
  done

  #install_name_tool -id %p/lib/rustlib/%m-apple-darwin/lib/libLLVM.dylib %i/lib/rustlib/%m-apple-darwin/lib/libLLVM.dylib
  #install_name_tool -id %p/lib/rustlib/%m-apple-darwin/codegen-backends/librustc_codegen_llvm-llvm.dylib %i/lib/rustlib/%m-apple-darwin/codegen-backends/librustc_codegen_llvm-llvm.dylib
  
  mv %i/libexec/rust-analyzer-proc-macro-srv %i/bin
  rm -rf %i/libexec
  
  rm %i/lib/rustlib/install.log %i/lib/rustlib/uninstall.sh
<<
Shlibs: <<
	!%p/lib/librustc_driver-4f3eee8274de91bd.dylib
	!%p/lib/libstd-d50560e9e437b847.dylib
	!%p/lib/rustlib/x86_64-apple-darwin/lib/libstd-d50560e9e437b847.dylib
	!%p/lib/libLLVM.dylib
<<
DocFiles: <<
  CONTRIBUTING.md COPYRIGHT LICENSE-APACHE LICENSE-MIT README.md RELEASES.md
<<
Homepage: https://www.rust-lang.org/
DescDetail: <<
Rust is a curly-brace, block-structured expression language. It visually
resembles the C language family, but differs significantly in syntactic
and semantic details. Its design is oriented toward concerns of
"programming in the large", that is, of creating and maintaining
boundaries - both abstract and operational - that preserve large-system
integrity, availability and concurrency.

It supports a mixture of imperative procedural, concurrent actor,
object-oriented and pure functional styles. Rust also supports generic
programming and metaprogramming, in both static and dynamic styles.
<<
