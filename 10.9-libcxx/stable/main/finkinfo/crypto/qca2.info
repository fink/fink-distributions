Info3: <<
Package: qca2-%type_pkg[qca]
Version: 2.2.1
Revision: 3
Description: Cross-platform Crypto API
Type: qca (x11 mac)
License: LGPL
Maintainer: Hanspeter Niederstrasser <nieder@users.sourceforge.net>

Depends: %N-shlibs (= %v-%r)
BuildDepends: <<
	botan1.10,
	cyrus-sasl2.3-dev,
	fink (>= 0.32),
	fink-package-precedence,
	libgcrypt20,
	libgpg-error,
	openssl110-dev,
	qt4-base-%type_pkg[qca] (>= 4.7.3-1),
	(%type_pkg[qca] = x11) x11-dev
<<
BuildDependsOnly: true
GCC: 4.0

Source: https://download.kde.org/stable/qca/%v/qca-%v.tar.xz
Source-MD5: 5d809bf0ade891dc89dfd7639cbeaa9d
Source2: http://archive.ubuntu.com/ubuntu/pool/universe/q/qca2/qca2_%v-2build1.debian.tar.xz
Source2-MD5: 1ea9c49e0e795c8d44b3912fcb32b8ea
#PatchFile: qca2.patch
#PatchFile-MD5: 3b0058b8220fe6f0aefd081d7a30572a
PatchScript: <<
	patch -p1 < ../debian/patches/define_qca_export.diff
	patch -p1 < ../debian/patches/pipeunittest_more_wait.diff
<<
CompileScript: <<
	#!/bin/sh -ev
	QTDIR="%p/lib/qt4-%type_pkg[qca]"
	QCADIR="%p/opt/qca2/%type_pkg[qca]"
	export PATH="%b:$QTDIR/bin:$PATH"
	. %p/sbin/fink-buildenv-cmake.sh
	mkdir finkbuild
	pushd finkbuild
	cmake \
		$FINK_CMAKE_ARGS \
		-DCMAKE_CXX_FLAGS=-MD \
		-DCMAKE_LINKER_FLAGS="-headerpad_max_install_names" \
		-DOSX_FRAMEWORK:BOOL=OFF \
		-DCMAKE_INSTALL_PREFIX=%p/opt/qca2/%type_pkg[qca] \
		-DCMAKE_INSTALL_NAME_DIR=%p/opt/qca2/%type_pkg[qca]/lib \
		-DBUILD_PLUGINS="botan;cyrus-sasl;gcrypt;gnupg;logger;ossl;softstore" \
		-DQCA_FEATURE_INSTALL_DIR:PATH=%p/lib/qt4-%type_pkg[qca]/share/qt4/mkspecs/features \
		-DSASL2_INCLUDE_DIR:PATH=%p/include \
		-DSASL2_LIBRARIES:FILEPATH=%p/lib/libsasl2.dylib \
		-Dqca_CERTSTORE=%p/etc/ssl/cert.pem \
		-LAH \
	..
	make -w
	popd
	fink-package-precedence --depfile-ext='\.d' .
<<
InfoTest: <<
	TestDepends: <<
		qt4-base-%type_pkg[qca]-qtcore-shlibs (>= 4.7.3-1),
		qt4-base-%type_pkg[qca]-qtnetwork-shlibs (>= 4.7.3-1),
		qt4-base-%type_pkg[qca]-qttest-shlibs (>= 4.7.3-1)
	<<
	TestScript: <<
		#!/bin/sh -ev
		QCADIR="%p/opt/qca2/%type_pkg[qca]"
		pushd finkbuild
			# point the test programs to the uninstalled library in %b
			for testprog in bin/*test bin/clientplugin bin/cms bin/keybundle bin/keystore bin/pkits; do
				install_name_tool -change $QCADIR/lib/libqca.2.dylib %b/finkbuild/lib/libqca.2.dylib $testprog
			done
			make -j1 test || exit 2
			# restore install_names to test programs (needed since they're not installed?)
			install_name_tool -change %b/finkbuild/lib/libqca.2.dylib $QCADIR/lib/libqca.2.dylib $testprog
		popd
	<<
<<

InstallScript: <<
#!/bin/sh -ev
	pushd finkbuild
	QCADIR="%p/opt/qca2/%type_pkg[qca]"
	make install DESTDIR="%d"
	popd

	### qca-2.0.3 had qcatool2. Make a compatibility symlink just in case.
	ln -s $QCADIR/bin/qcatool %d/$QCADIR/bin/qcatool2

	### Clean up prf.
	### Still needed? This is in a debug build only chunk.
	perl -pi -e 's,-lqca_debug,-lqca,g' %i/lib/qt4-%type_pkg[qca]/share/qt4/mkspecs/features/crypto.prf

	#install -d -m 755 %i/share/doc/%N
	#mv apidocs/* examples %i/share/doc/%N/
<<
DocFiles: COPYING INSTALL README TODO
SplitOff: <<
	Package: %N-shlibs
	Description: Shared libraries for QCA
	Depends: <<
		qt4-base-%type_pkg[qca]-qtcore-shlibs (>= 4.7.3-1)
	<<
	Recommends: <<
		%N (>= %v-%r),
		%N-plugin (>= %v-%r)
	<<
	DocFiles: COPYING
	Files: opt/qca2/%type_pkg[qca]/lib/libqca.2*.dylib
	Shlibs: %p/opt/qca2/%type_pkg[qca]/lib/libqca.2.dylib 2.0.0 %n (>= 2.0.2-1)
<<
SplitOff2: <<
	Package: %N-plugins
	Description: Crypto plugins for QCA
	Depends: <<
		%N-shlibs (>= %v-%r),
		botan1.10-shlibs,
		cyrus-sasl2.3-shlibs,
		libgcrypt20-shlibs,
		libgpg-error-shlibs,
		openssl110-shlibs,
		qt4-base-%type_pkg[qca]-qtcore-shlibs (>= 4.7.3-1)
	<<
	DocFiles: COPYING
	Files: opt/qca2/%type_pkg[qca]/lib/qca/crypto
<<
SplitOff3: <<
	Package: %N-utils
	Description: Command line tools for QCA
	Depends: <<
		%N-shlibs (>= %v-%r),
		qt4-base-%type_pkg[qca]-qtcore-shlibs (>= 4.7.3-1)
	<<
	Replaces: %N (<< 2.1.3-1)
	DocFiles: COPYING
	Files: <<
		opt/qca2/%type_pkg[qca]/bin
		opt/qca2/%type_pkg[qca]/share/man
	<<
<<
Homepage: https://userbase.kde.org/QCA
DescDetail: <<
Taking a hint from the similarly-named Java Cryptography Architecture,
QCA aims to provide a straightforward and cross-platform crypto API,
using Qt datatypes and conventions.  QCA separates the API from the
implementation, using plugins known as Providers.  The advantage of
this model is to allow applications to avoid linking to or explicitly
depending on any particular cryptographic library.  This allows one
to easily change or upgrade crypto implementations without even
needing to recompile the application!
<<
<<

