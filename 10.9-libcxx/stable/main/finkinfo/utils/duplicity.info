Package: duplicity
Version: 0.8.17
Revision: 2
Description: Encrypted backup using rsync algorithm
License: GPL
Homepage: http://duplicity.nongnu.org/
Maintainer: Scott Hannahs <shannahs@users.sourceforge.net>

# Dependencies.
BuildDepends: <<
	fink (>= 0.24.12-1),
	librsync (>= 0.9.7-1002)
<<

Depends: <<
	python38,
	librsync-shlibs (>= 0.9.7-1002),
	gnupg2,
	setuptools-tng-py38,
	fasteners-py38,
	intltool40,
	paramiko-py38,
	pycrypto-py38,
	pexpect-py38,
	lftp,
	ncftp,
	par2,
	boto-py38 (>= 2.7.0),
	requests-oauthlib-py38
<<

# Unpack Phase.
Source: https://launchpad.net/%n/0.8-series/%v/+download/%n-%v.tar.gz
Source-MD5: d81fcc244c09f42628b580fda7b7c7ce

# Patch Phase.
PatchFile: %n.patch
PatchFile-MD5: 8ec0ecf4ef5c708c5c030e03aab359b7
PatchScript: <<
    sed 's|@PREFIX@|%p|g' < %{PatchFile} | patch -p1
<<

# Compile Phase.
CompileScript: %p/bin/python3.8 setup.py build  --librsync-dir=%p --build-base=%i

InfoTest: <<
    TestDepends: <<
        pylint-py38,
	future-py38,
        librsync-bin,
	mock-py38,
	pluggy-py38,
	py-py38,
	tox-py38
<<
    TestScript: <<
    	#!/bin/sh -ev
	OSXVersion="$(sw_vers -productVersion | cut -f 2- -d .)"
	if [[ "${OSXVersion}" < "14" ]]; then
	    ulimit -n 8192
	fi
	chmod 0700 `pwd`/testing/gnupg
        %p/bin/python3.8 setup.py test
<<
<<

# Install Phase.
InstallScript: %p/bin/python3.8 setup.py install --prefix=%p --root=%d  --librsync-dir=%p
DocFiles: AUTHORS CHANGELOG.md COPYING README.md README-LOG.md README-REPO.md README-TESTING.md

# Documentation.
DescDetail: <<
Duplicity backs directories by producing encrypted
tar-format volumes and uploading them to a remote
or local file server. Because duplicity uses
librsync, the incremental archives are space
efficient and only record the parts of files that
have changed since the last backup. Because
duplicity uses GnuPG to encrypt and/or sign these
archives, they will be safe from spying and/or
modification by the server.

The duplicity package also includes the rdiffdir
utility. Rdiffdir is an extension of librsync's
rdiff to directories---it can be used to produce
signatures and deltas of directories as well as
regular files. These signatures and deltas are in
GNU tar format.
<<

DescPackaging:  <<
The testing phase needs more than the default 256
maximum files, it is set to 8192 in the test script
for older OS (<10.14).  Newer OS needs to be set
manually since ulimit does not function the same.
Testing phase (on 10.11) has:
5 failed, 421 passed, 2 skipped, 2 warnings
Failure due to old implementation of unicode.

supports
  ssh parmiko
  ssh pexpect
  rsync
  lftp
  ncftp
  onedrive
  Amazon web services (multi-processing and Glacier)
  Google Cloud Storage

Other backends
Backend Requirements:
 * scp/sftp paramiko -- python-paramiko, python-pycryptopp
 * scp/sftp pexpect -- openssh, pexpect
 * lftp -- lftp version 3.7.15 or later
 * ncftp -- ncftp
 * OneDrive -- python-requests & python-requests-oauthlib
 * Azure -- python Azure SDK (not implemented)
 * Boto 2.7.0 or later for Glacier S3 access

Previously maintained by Murali Vadivelu
<<
