diff -ruNd matplotlib-3.1.0.orig/lib/matplotlib/font_manager.py matplotlib-3.1.0/lib/matplotlib/font_manager.py
--- matplotlib-3.1.0.orig/lib/matplotlib/font_manager.py	2019-05-18 20:01:10.000000000 +0200
+++ matplotlib-3.1.0/lib/matplotlib/font_manager.py	2019-05-28 14:51:29.000000000 +0200
@@ -154,6 +154,11 @@
     "/Library/Fonts/",
     "/Network/Library/Fonts/",
     "/System/Library/Fonts/",
+    # new XQuartz font location
+    "/opt/X11/share/fonts",
+    "/opt/X11/share/fonts/TTF",
+    # fonts installed via Fink
+    "@PREFIX@/lib/X11/fonts",
     # fonts installed via MacPorts
     "/opt/local/share/fonts",
     # user fonts
diff -ruNd matplotlib-3.3.0.orig/setup.cfg.template matplotlib-3.3.0/setup.cfg.template
--- matplotlib-3.3.0.orig/setup.cfg.template	2020-07-16 06:57:08.000000000 +0200
+++ matplotlib-3.3.0/setup.cfg.template	2020-08-11 20:22:15.000000000 +0200
@@ -29,6 +29,11 @@
 # It is never built on Linux or Windows, regardless of the config value.
 #
 #macosx = True
+agg = True
+tkagg = True
+qt4agg = True
+qt5agg = True
+wxagg = True
 
 [rc_options]
 # User-configurable options
@@ -41,3 +46,4 @@
 # default is determined by fallback.
 #
 #backend = Agg
+backend = Qt5Agg
diff -ruNd matplotlib-3.3.2.orig/setupext.py matplotlib-3.3.2/setupext.py
--- matplotlib-3.3.2.orig/setupext.py	2020-09-15 09:04:28.000000000 +0200
+++ matplotlib-3.3.2/setupext.py	2020-10-09 20:36:24.000000000 +0200
@@ -596,10 +596,10 @@
         if sys.platform != 'win32':  # compilation on non-windows
             env = {**env, "CFLAGS": "{} -fPIC".format(env.get("CFLAGS", ""))}
             subprocess.check_call(
-                ["./configure", "--with-zlib=no", "--with-bzip2=no",
-                 "--with-png=no", "--with-harfbuzz=no", "--enable-static",
-                 "--disable-shared"],
-                env=env, cwd=src_path)
+                ["./configure --prefix=@PREFIX@ --libdir=@PREFIX@/lib/freetype219/lib" +
+                 "--with-zlib=no --with-bzip2=no --with-png=no --with-harfbuzz=no" +
+                 "--enable-static --disable-shared"],
+                shell=True, env=env, cwd=src_path)
             if 'GNUMAKE' in env:
                 make = env['GNUMAKE']
             elif 'MAKE' in env:
diff -ruNd matplotlib-3.0.3.orig/lib/matplotlib/tests/test_backend_pdf.py matplotlib-3.0.3/lib/matplotlib/tests/test_backend_pdf.py
--- matplotlib-3.0.3.orig/lib/matplotlib/tests/test_backend_pdf.py	2020-09-15 09:04:27.000000000 +0200
+++ matplotlib-3.0.3/lib/matplotlib/tests/test_backend_pdf.py	2020-10-19 19:33:33.000000000 +0200
@@ -227,7 +227,7 @@
 
 
 # This tests tends to hit a TeX cache lock on AppVeyor.
-@pytest.mark.flaky(reruns=3)
+@pytest.mark.flaky(max_runs=3, min_passes=2)
 @needs_usetex
 def test_missing_psfont(monkeypatch):
     """An error is raised if a TeX font lacks a Type-1 equivalent"""
diff -ruNd matplotlib-3.3.2.orig/lib/matplotlib/tests/test_backend_ps.py matplotlib-3.3.2/lib/matplotlib/tests/test_backend_ps.py
--- matplotlib-3.3.2.orig/lib/matplotlib/tests/test_backend_ps.py	2020-09-15 09:04:27.000000000 +0200
+++ matplotlib-3.3.2/lib/matplotlib/tests/test_backend_ps.py	2020-10-19 22:33:33.000000000 +0200
@@ -20,7 +20,7 @@
 
 
 # This tests tends to hit a TeX cache lock on AppVeyor.
-@pytest.mark.flaky(reruns=3)
+@pytest.mark.flaky(max_runs=3, min_passes=2)
 @pytest.mark.parametrize('orientation', ['portrait', 'landscape'])
 @pytest.mark.parametrize('format, use_log, rcParams', [
     ('ps', False, {}),
diff -ruNd matplotlib-3.3.2.orig/lib/matplotlib/tests/test_backends_interactive.py matplotlib-3.3.2/lib/matplotlib/tests/test_backends_interactive.py
--- matplotlib-3.3.2.orig/lib/matplotlib/tests/test_backends_interactive.py	2020-09-15 09:04:27.000000000 +0200
+++ matplotlib-3.3.2/lib/matplotlib/tests/test_backends_interactive.py	2020-10-19 22:49:43.000000000 +0200
@@ -144,7 +144,7 @@
 
 @pytest.mark.parametrize("backend", _get_testable_interactive_backends())
 @pytest.mark.parametrize("toolbar", ["toolbar2", "toolmanager"])
-@pytest.mark.flaky(reruns=3)
+@pytest.mark.flaky(max_runs=3, min_passes=2)
 def test_interactive_backend(backend, toolbar):
     if backend == "macosx":
         if toolbar == "toolmanager":
diff -ruNd matplotlib-3.0.3.orig/lib/matplotlib/tests/test_lines.py matplotlib-3.0.3/lib/matplotlib/tests/test_lines.py
--- matplotlib-3.0.3.orig/lib/matplotlib/tests/test_lines.py	2019-03-01 04:33:38.000000000 +0100
+++ matplotlib-3.0.3/lib/matplotlib/tests/test_lines.py	2020-10-19 19:33:33.000000000 +0200
@@ -28,7 +28,7 @@
 
 # Runtimes on a loaded system are inherently flaky. Not so much that a rerun
 # won't help, hopefully.
-@pytest.mark.flaky(reruns=3)
+@pytest.mark.flaky(max_runs=3, min_passes=1)
 def test_invisible_Line_rendering():
     """
     GitHub issue #1256 identified a bug in Line.draw method
--- matplotlib-3.2.0.orig/lib/matplotlib/tests/test_backend_nbagg.py	2020-02-01 21:41:08.000000000 +0100
+++ matplotlib-3.2.0/lib/matplotlib/tests/test_backend_nbagg.py	2020-03-11 22:28:56.000000000 +0100
@@ -5,6 +5,7 @@
 
 import pytest
 
+pytest.importorskip('nbconvert')
 nbformat = pytest.importorskip('nbformat')
 
 # From https://blog.thedataincubator.com/2016/06/testing-jupyter-notebooks/
@@ -16,7 +16,7 @@
     with TemporaryDirectory() as tmpdir:
         out_path = Path(tmpdir, "out.ipynb")
         subprocess.check_call(
-            ["jupyter", "nbconvert", "--to", "notebook",
+            ["jupyter-py@PY_PKG@", "nbconvert", "--to", "notebook",
              "--execute", "--ExecutePreprocessor.timeout=500",
              "--output", str(out_path), str(nb_path)],
             env={**os.environ, "IPYTHONDIR": tmpdir})
diff -ruNd matplotlib-3.1.0.orig/lib/matplotlib/tests/test_nbagg_01.ipynb matplotlib-3.1.0/lib/matplotlib/tests/test_nbagg_01.ipynb
--- matplotlib-3.1.0.orig/lib/matplotlib/tests/test_nbagg_01.ipynb	2019-04-01 02:50:07.000000000 +0200
+++ matplotlib-3.1.0/lib/matplotlib/tests/test_nbagg_01.ipynb	2019-05-29 01:15:44.000000000 +0200
@@ -843,7 +843,7 @@
   "kernelspec": {
    "display_name": "Python 3",
    "language": "python",
-   "name": "python3"
+   "name": "python@PY_RAW@"
   },
   "language_info": {
    "codemirror_mode": {
@@ -854,7 +854,7 @@
    "mimetype": "text/x-python",
    "name": "python",
    "nbconvert_exporter": "python",
-   "pygments_lexer": "ipython3",
+   "pygments_lexer": "ipython3-py@PY_PKG@",
    "version": "3.6.3"
   },
   "toc": {
diff -ruNd matplotlib-3.3.3.orig/lib/matplotlib/tests/test_constrainedlayout.py matplotlib-3.3.3/lib/matplotlib/tests/test_constrainedlayout.py
--- matplotlib-3.3.3.orig/lib/matplotlib/tests/test_constrainedlayout.py	2020-11-12 05:38:07.000000000 +0100
+++ matplotlib-3.3.3/lib/matplotlib/tests/test_constrainedlayout.py	2021-01-13 16:57:57.000000000 +0100
@@ -366,7 +366,6 @@
 # flaky.  Apparently the constraint solver occasionally doesn't fully
 # optimize.  Would be nice if this were more deterministic...
 @pytest.mark.timeout(30)
-@pytest.mark.flaky(reruns=3)
 @image_comparison(['test_colorbar_location.png'],
                   remove_text=True, style='mpl20')
 def test_colorbar_location():
