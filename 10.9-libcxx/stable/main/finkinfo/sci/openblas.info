# -*- coding: ascii; tab-width: 4 -*-
Info2: <<
Package: openblas
Version: 0.3.19
Revision: 1
Type: gcc (11)
Maintainer: Derek Homeier <dhomeie@gwdg.de>

BuildDependsOnly: true
BuildDepends: fink (>= 0.30.0), gcc%type_raw[gcc]-compiler
Depends: %N-shlibs (= %v-%r)

Source: https://github.com/xianyi/OpenBLAS/archive/v%v.tar.gz
Source-Checksum: SHA256(947f51bfe50c2a0749304fbe373e00e7637600b0a47b78a51382aeb30ca08562)
SourceRename: OpenBLAS-%v.tar.gz
PatchFile: %n.patch
PatchFile-MD5: e9d16e8a2772758bbd37e29e3c25c0f8

PatchScript: sed 's|@PREFIX@|%p|g' < %{PatchFile} | patch -p1

SetCC: gcc-fsf-%type_raw[gcc]

CompileScript: <<
	#!/bin/sh -ev
	perl -pi -e 's|(^# )(DYNAMIC_ARCH = 1)|$2|;' Makefile.rule
	# remove excessive truncating of $hostarch https://github.com/xianyi/OpenBLAS/commit/00ce353
	perl -pi -e 's|;chop..hostarch.;|;|' c_check
	# set arch to minimum model supported in OS version
	darwin_vers=$(uname -r | cut -d. -f1)
	if [ "$darwin_vers" -ge 18 ]; then
		perl -pi -e "s|(COMMON_OPT = -O2)|\$1 -mtune=cascadelake -march=ivybridge|g;" Makefile.system
		export DYNAMIC_LIST="SANDYBRIDGE HASWELL SKYLAKEX"
	else
		perl -pi -e "s|(COMMON_OPT = -O2)|\$1 -mtune=skylake-avx512 -march=core2|g;" Makefile.system
		export DYNAMIC_LIST="CORE2 PENRYN NEHALEM SANDYBRIDGE HASWELL"
	fi
	make FC=gfortran-fsf-%type_raw[gcc] USE_THREAD=1 libs netlib shared
	cd benchmark
	mkdir -m 755 bin
	mv Makefile Makefile.orig
	# 6 tests require clock_gettime, disable if missing (on 10.11); *axpby seems not provided by (some) Accelerate versions
	if [ "$darwin_vers" -lt 16 ]; then
		egrep -v 'saxpy.*daxpy.*.caxpy\.|scopy.*dcopy.*ccopy\.|st[pr][ms]v.*dt[pr][ms]v.*ct[pr][ms]v\.' Makefile.orig > Makefile
	else
		egrep -v 'saxpy\.veclib.*daxpy\.veclib.*.caxpy\.veclib' Makefile.orig > Makefile
	fi
	# For some reason #define RETURN_BY_STACK 1 is not properly recognised in zdot-intel.c...
	make FC=gfortran-fsf-%type_raw[gcc] USE_THREAD=1 FOPENMP=-fopenmp LIBSUFFIX=dylib CFLAGS+=-DRETURN_BY_STACK=1 {c,z}dot-intel.o
	make FC=gfortran-fsf-%type_raw[gcc] USE_THREAD=1 FOPENMP=-fopenmp LIBSUFFIX=dylib veclib goto smallscaling
	for x in smallscaling *.goto; do
		install_name_tool -change %b/exports/../libopenblas.0.dylib %p/lib/libopenblas.0.dylib $x
	done
	mv *.veclib *.goto smallscaling bin
<<

InstallScript: <<
	make FC=gfortran-fsf-%type_raw[gcc] PREFIX=%p DESTDIR=%d install
	install_name_tool -id %p/lib/libopenblas.0.dylib %i/lib/libopenblas.0.dylib
	mv %i/include/cblas.h %i/include/cblas_openblas.h
<<

InfoTest: <<
	TestDepends: atlas
	TestScript: <<
		#!/bin/sh -ev
		make FC=gfortran-fsf-%type_raw[gcc] USE_THREAD=1 tests | tee tests.log
		grep -il fail tests.log && grep -i fail tests.log
		grep -c PASSED tests.log
		cd benchmark
		make FC=gfortran-fsf-%type_raw[gcc] USE_THREAD=1 FOPENMP=-fopenmp atlas
		# use hw.physicalcpu to run without hyperthreading
		ncore=$(sysctl -n hw.logicalcpu)
		# created a ton of *.veclib, *.goto, *.atlas executables to be compared in performance...
		# just filter results for a sample of matrix sizes and run a little suite of comparisons of threaded vs. openmp speedup
		echo ATLAS
		for x in *.atlas; do
			echo OPENBLAS_NUM_THREADS=$ncore OMP_NUM_THREADS=1 $x
			OPENBLAS_NUM_THREADS=$ncore OMP_NUM_THREADS=1 ./$x 2>&1 | awk '(NR < 4)||((NR-2)%%20 == 0)'
		done
		cd bin
		echo VecLib
		for x in *.veclib; do
			echo OPENBLAS_NUM_THREADS=$ncore OMP_NUM_THREADS=1 $x
			OPENBLAS_NUM_THREADS=$ncore OMP_NUM_THREADS=1 ./$x 2>&1 | awk '(NR < 4)||((NR-2)%%20 == 0)'
		done
		echo OpenBLAS
		for x in *.goto; do
			echo OPENBLAS_NUM_THREADS=$ncore OMP_NUM_THREADS=1 $x
			DYLD_LIBRARY_PATH=%b OPENBLAS_NUM_THREADS=$ncore OMP_NUM_THREADS=1 ./$x 2>&1 | awk '(NR < 4)||((NR-2)%%20 == 0)'
		done
		DYLD_LIBRARY_PATH=%b OPENBLAS_NUM_THREADS=1 OMP_NUM_THREADS=$ncore ./smallscaling
	<<
<<

Splitoff: <<
	Package: %N-shlibs
	Depends: gcc%type_raw[gcc]-shlibs
	DocFiles: LICENSE USAGE.md
	Files: lib/libopenblas.0.dylib
	Shlibs: %p/lib/libopenblas.0.dylib 0.0.0 %v (>= 0.3.5-1)
<<

DocFiles: LICENSE README.md USAGE.md Changelog.txt CONTRIBUTORS.md BACKERS.md GotoBLAS_0*.txt benchmark/scripts benchmark/bin
License: BSD
Homepage: https://www.openblas.net

Description: Optimized BLAS library based on GotoBLAS2
DescDetail: <<
BLAS stands for Basic Linear Algebra Subprograms. BLAS provides standard
interfaces for linear algebra, including BLAS1 (vector-vector operations),
BLAS2 (matrix-vector operations), and BLAS3 (matrix-matrix operations).
In general, BLAS is the computational kernel ("the bottom of the food chain")
in linear algebra or scientific applications. Thus, if BLAS implementation is
highly optimized, the whole application can get substantial benefit.

As BLAS is a standardized interface, you can refer to the documentation of its
reference implementation at netlib.org. Calls from C go through its CBLAS
interface, so your code will need to include the provided cblas.h in addition
to linking with -lopenblas.
A single-precision matrix multiplication will look like

#include <cblas.h>
...
cblas_sgemm(CblasRowMajor, CblasNoTrans,
            CblasNoTrans, M, N, K, 1.0, A, K, B, N, 0.0, result, N);

where M,N,K are the dimensions of your data.

OpenBLAS is an open source BLAS library forked from GotoBLAS2-1.13 BSD version.
Since Mr. Kazushige Goto left TACC, GotoBLAS is no longer being maintained.
Thus this project was created to continue developing OpenBLAS/GotoBLAS.
<<
DescPackaging: <<
Setup with architecture-independent version and some patches from MacPorts
https://github.com/macports/macports-ports/blob/master/math/OpenBLAS/Portfile
Build with FSF gcc9 to ensure optimum compatibility with gfortran.
cblas.h conflicts with header from atlas.
Also builds executables for comparison with VecLib [+Atlas] in benchmark/bin,
TestScript does not run them all (producing ~200 lines of timing output each);
adding benchmark scripts and binaries to docs.
Optimisation flags chosen to create binary packages that should work on
anything from Pentium with SSE upwards, with tuning up to Cascadelake CPUs with
AVX512 support.
(Note: gcc9 manual states `-mtune=intel` includes "Haswell & Silvermont" as
"most recent supported" by that gcc version, but I found the intel tuning
option to create different assembly output than haswell or skylake upwards.
Chose cascadelake for 0.3.8 as newest generation available in the 2019 Mac Pro;
actually all tuning options from skylake to icelake appear to generate
identical assembler and object code.)
0.3.8: patched in https://github.com/xianyi/OpenBLAS/pull/2424
  to resolve gcc-9 build failure (#2421).
  Patched `smallscaling` benchmark to substitute CLOCK_MONOTONIC + clock_gettime
  on 10.11 and lower (https://sourceforge.net/p/fink/mailman/message/36927850/),
  based on https://github.com/sysown/proxysql/issues/1571 and
  https://stackoverflow.com/a/11709413 .
  Including, but not using patches for build with clang without -fopenmp option;
  for that FOPENMP needs to be set instead to
  "-I$(ls -d %p/lib/gcc%type_raw[gcc]/lib/gcc/x86_64-*/%type_raw[gcc]*/include) -L%p/lib/gcc%type_raw[gcc]/lib -lgomp"
0.3.10: 6 benchmarks axpy, copy, tpmv, tpsv, trmv, trsv also using clock_gettime now
  and failing on 10.11; disabled since substitute function from smallscaling.c does
  not seem to produce accurate enough timings
  Build dynamically linked benchmarks (static versions grew to > 1.5 GB).
<<
# Info2
<<
