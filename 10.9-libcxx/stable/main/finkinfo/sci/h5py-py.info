Info3: <<
Package: h5py-py%type_pkg[python]
Type: python (2.7 3.4 3.5 3.6 3.7)
Version: 2.10.0
Revision: 1
Distribution: <<
	(%type_pkg[python] = 34 ) 10.9,
	(%type_pkg[python] = 34 ) 10.10,
	(%type_pkg[python] = 34 ) 10.11,
	(%type_pkg[python] = 34 ) 10.12,
	(%type_pkg[python] = 34 ) 10.13,
	(%type_pkg[python] = 34 ) 10.14,
	(%type_pkg[python] = 34 ) 10.14.5,
	(%type_pkg[python] = 34 ) 10.15,
	(%type_pkg[python] = 35 ) 10.9,
	(%type_pkg[python] = 35 ) 10.10,
	(%type_pkg[python] = 35 ) 10.11,
	(%type_pkg[python] = 35 ) 10.12,
	(%type_pkg[python] = 35 ) 10.13,
	(%type_pkg[python] = 35 ) 10.14,
	(%type_pkg[python] = 35 ) 10.14.5,
	(%type_pkg[python] = 35 ) 10.15,
	(%type_pkg[python] = 36 ) 10.9,
	(%type_pkg[python] = 36 ) 10.10,
	(%type_pkg[python] = 36 ) 10.11,
	(%type_pkg[python] = 36 ) 10.12,
	(%type_pkg[python] = 36 ) 10.13,
	(%type_pkg[python] = 36 ) 10.14,
	(%type_pkg[python] = 36 ) 10.14.5,
	(%type_pkg[python] = 36 ) 10.15
<<
License: BSD
Homepage: http://www.h5py.org/
Maintainer: None <fink-devel@lists.sourceforge.net>

Source: https://files.pythonhosted.org/packages/source/h/h5py/h5py-%v.tar.gz
Source-Checksum: SHA256(84412798925dc870ffd7107f045d7659e60f5d46d1c70c700375248bf6bf512d)

DocFiles: README.rst

# Arch-linux has patches for upgrading hdf5.100 -> hdf5.200:
#   https://github.com/archlinux/svntogit-community/commit/d6a557d7c00dac240370c216f926bd89aafb65bd
# cf.
#   https://github.com/h5py/h5py/issues/1505
# which allows compiling but then there is a self-test fail (passes
# with hdf5.100) that might be solved by upgrading py27 -> py38:
#   https://github.com/h5py/h5py/issues/1435
PatchScript: <<
  # Temporary patches to h5py 2.3.0 for hdf5 1.8.13
  perl -pi -e 's|hid_t H5FD_MPIPOSIX||' h5py/h5fd.pxd
  perl -pi -e 's|MPIPOSIX = H5FD_MPIPOSIX|MPIPOSIX = -1|' h5py/h5fd.pyx
<<

Depends: <<
  python%type_pkg[python],
  numpy-py%type_pkg[python],
  pathlib-py%type_pkg[python],
  six-py%type_pkg[python],
  hdf5.100.v1.10-shlibs
<<
BuildDepends: <<
  setuptools-tng-py%type_pkg[python],
  cython-py%type_pkg[python],
  hdf5.100.v1.10,
  hdf5-cpp.100.v1.10,
  pkgconfig-py%type_pkg[python]
<<

CompileScript: <<
  #!/bin/bash -ev
  # Stopped working: --hdf5=%p
  HDF5_DIR=%p/opt/hdf5.v1.10 %p/bin/python%type_raw[python] setup.py build
<<
InstallScript: %p/bin/python%type_raw[python] setup.py install --root=%d

InfoTest: <<
	TestDepends: <<
		( %type_pkg[python] = 27 ) unittest2-py%type_pkg[python],
		pytest-py%type_pkg[python]
	<<
	TestScript: <<
		%p/bin/python%type_raw[python] -B setup.py test || exit 2
		rm -rf build/lib.macosx-*/h5py/tests/__pycache__ \
			build/lib.macosx-*/h5py/tests/test_vds/__pycache__ \
			build/lib.macosx-*/h5py/__pycache__ \
			build/lib.macosx-*/h5py/_hl/__pycache__
	<<
	TestSuiteSize: small
<<

Description: HDF5 data interface
DescDetail: <<
HDF5 for Python (h5py) is a general-purpose Python interface to the
Hierarchical Data Format library, version 5. HDF5 is a versatile,
mature scientific software library designed for the fast, flexible
storage of enormous amounts of data.

From a Python programmer's perspective, HDF5 provides a robust way to
store data, organized by name in a tree-like fashion. You can create
datasets (arrays on disk) hundreds of gigabytes in size, and perform
random-access I/O on desired sections. Datasets are organized in a
filesystem-like hierarchy using containers called "groups", and
accessed using the tradional POSIX /path/to/resource syntax.  Why
should I use it?

H5py provides a simple, robust read/write interface to HDF5 data from
Python. Existing Python and Numpy concepts are used for the interface;
for example, datasets on disk are represented by a proxy class that
supports slicing, and has dtype and shape attributes. HDF5 groups are
presented using a dictionary metaphor, indexed by name.

A major design goal of h5py is interoperability; you can read your
existing data in HDF5 format, and create new files that any HDF5-
aware program can understand. No Python-specific extensions are used;
you're free to implement whatever file structure your application
desires.

Almost all HDF5 features are available from Python, including things
like compound datatypes (as used with Numpy recarray types), HDF5
attributes, hyperslab and point-based I/O, and more recent features in
HDF 1.8 like resizable datasets and recursive iteration over entire
files.

The foundation of h5py is a near-complete wrapping of the HDF5 C
API. HDF5 identifiers are first-class objects which participate in
Python reference counting, and expose the C API via methods. This
low-level interface is also made available to Python programmers, and
is exhaustively documented.

Features

    * High-level interface which supports Numpy slicing syntax,
      including ranges, ellipsis objects, recarray indexing of
      compound fields, and auto-conversion between Numpy and HDF5
      datatypes
    * Reads and writes standard HDF5 files (with no Python-specific
      extensions) which will work with any other HDF5-aware program
    * The complete low-level HDF5 C API is available to Python in an
      intuitive, object-oriented fashion. For example, identifiers are
      full-fledged objects which expose HDF5 API functions as methods,
      and participate in reference counting. No more identifier leaks!
    * Every function is documented, including the low-level API
    * Error handling uses Python exceptions; the HDF5 library itself
      raises exceptions from a complete and fine-grained exception
      hierarchy.
<<
DescPackaging:<<
Former maintainer: Kurt Schwehr <goatbar@users.sourceforge.net>
<<

<<

