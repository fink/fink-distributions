diff -ruN R-4.1.1-orig/Makefile.fw R-4.1.1/Makefile.fw
--- R-4.1.1-orig/Makefile.fw	2023-12-01 18:46:07
+++ R-4.1.1/Makefile.fw	2023-12-01 18:46:47
@@ -8,7 +8,7 @@
 
 install install-strip: install-R-framework
 		@(sed 's|^LIBR =.*|LIBR = -F$(R_FRAMEWORK_DIR)/.. -framework R|' \
-		  $(top_builddir)/etc/Makeconf > "$(rhome)/etc${R_ARCH}/Makeconf")
+		  $(top_builddir)/etc/Makeconf > "$(DESTDIR)$(R_FRAMEWORK_DIR)/Resources/etc${R_ARCH}/Makeconf")
 		@(sed 's/Versions\/$(FW_VERSION)\/Resources/Resources/' \
 		  "$(DESTDIR)$(R_FRAMEWORK_DIR)/Resources/bin/R" > \
 		  "$(DESTDIR)$(R_FRAMEWORK_DIR)/Resources/bin/RR")
@@ -37,7 +37,7 @@
 	  ln -f -s -n Versions/Current/Resources Resources)
 	@## the resulting libR will point dyld to the fat libR regardless of its origin
 	@(cd "$(DESTDIR)$(R_FRAMEWORK_DIR)/Resources/lib" && \
-	  install_name_tool -id "$(R_FRAMEWORK_DIR)/Versions/$(FW_VERSION)/Resources/lib/libR.dylib" $(Rexeclibdir)/libR.dylib)
+	  install_name_tool -id "$(R_FRAMEWORK_DIR)/Versions/$(FW_VERSION)/Resources/lib/libR.dylib" $(DESTDIR)$(Rexeclibdir)/libR.dylib)
 	@( otool=otool ; if otool -D "$(DESTDIR)$(Rexeclibdir)/libR.dylib"|grep 'not an object'>/dev/null; then otool=otool64; fi; \
 	   for lib in Rlapack Rblas R; do \
 	   if test -e "$(DESTDIR)$(Rexeclibdir)/lib$${lib}.dylib"; then $(ECHO) "  lib$${lib}"; \
diff -ruN R-4.1.1-orig/configure R-4.1.1/configure
--- R-4.1.1-orig/configure	2023-12-01 18:46:06
+++ R-4.1.1/configure	2023-12-01 18:46:47
@@ -3915,8 +3915,8 @@
 
 ## As from R 3.2.0 split up -L... and -lR
 if test "${want_R_shlib}" = yes; then
-  LIBR0="-L\"\$(R_HOME)/lib\$(R_ARCH)\""
-  LIBR1=-lR
+  LIBR0="\$(R_HOME)/lib\$(R_ARCH)/libR\$(DYLIB_EXT)"
+  LIBR1=
 else
   LIBR0=
   LIBR1=
@@ -42049,7 +42049,7 @@
 
 if test "${use_blas_shlib}" = yes; then
   ## set BLAS_LIBS to point at local version
-  BLAS_LIBS="-L\"\$(R_HOME)/lib\$(R_ARCH)\" -lRblas"
+  BLAS_LIBS="\$(R_HOME)/lib\$(R_ARCH)/libRblas\$(DYLIB_EXT)"
 fi
 
  if test "x${use_veclib_g95fix}" = xyes; then
@@ -42214,7 +42214,7 @@
 
 fi
 if test "${acx_lapack_ok}" != "yes"; then
-  LAPACK_LIBS="-L\"\$(R_HOME)/lib\$(R_ARCH)\" -lRlapack"
+  LAPACK_LIBS="\$(R_HOME)/lib\$(R_ARCH)/libRlapack\$(DYLIB_EXT)"
 fi
 
  if test "${acx_lapack_ok}" = "yes"; then
@@ -46035,8 +46035,8 @@
 
 
 if test "x${have_libcurl}" = "xyes"; then
-{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if libcurl is version 7 and >= 7.28.0" >&5
-$as_echo_n "checking if libcurl is version 7 and >= 7.28.0... " >&6; }
+{ $as_echo "$as_me:${as_lineno-$LINENO}: checking if libcurl is >= 7.28.0" >&5
+$as_echo_n "checking if libcurl is >= 7.28.0... " >&6; }
 if ${r_cv_have_curl728+:} false; then :
   $as_echo_n "(cached) " >&6
 else
@@ -46052,7 +46052,7 @@
 {
 #ifdef LIBCURL_VERSION_MAJOR
 #if LIBCURL_VERSION_MAJOR > 7
-  exit(1);
+  exit(0);
 #elif LIBCURL_VERSION_MAJOR == 7 && LIBCURL_VERSION_MINOR >= 28
   exit(0);
 #else
diff -ruN R-4.1.1-orig/src/extra/intl/vasnprintf.c R-4.1.1/src/extra/intl/vasnprintf.c
--- R-4.1.1-orig/src/extra/intl/vasnprintf.c	2023-12-01 18:46:07
+++ R-4.1.1/src/extra/intl/vasnprintf.c	2023-12-01 18:46:47
@@ -4006,7 +4006,7 @@
 #endif
 		  *fbp = dp->conversion;
 #if USE_SNPRINTF
-# if !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3))
+# if !defined(__APPLE__) && !(__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 3))
 		fbp[1] = '%';
 		fbp[2] = 'n';
 		fbp[3] = '\0';
diff -ruN R-4.1.1-orig/src/library/grDevices/src/devQuartz.c R-4.1.1/src/library/grDevices/src/devQuartz.c
--- R-4.1.1-orig/src/library/grDevices/src/devQuartz.c	2023-12-01 18:46:07
+++ R-4.1.1/src/library/grDevices/src/devQuartz.c	2023-12-01 18:48:22
@@ -558,10 +558,10 @@
 
 #pragma mark Quartz Font Cache
 
-/* Font lookup is expesive yet frequent. Therefore we cache all used ATS fonts (which are global to the app). */
+/* Font lookup is expesive yet frequent. Therefore we cache all used CG fonts (which are global to the app). */
 
 typedef struct font_cache_entry_s {
-    ATSFontRef font;
+    CGFontRef font;
     char *family;
     int  face;
 } font_cache_entry_t;
@@ -576,7 +576,7 @@
 
 font_cache_t font_cache, *font_cache_tail = &font_cache;
 
-static ATSFontRef RQuartz_CacheGetFont(const char *family, int face) {
+static CGFontRef RQuartz_CacheGetFont(const char *family, int face) {
     font_cache_t *fc = &font_cache;
     while (fc) {
         int i = 0, j = fc->fonts;
@@ -590,7 +590,7 @@
     return 0;
 }
 
-static void RQuartz_CacheAddFont(const char *family, int face, ATSFontRef font) {
+static void RQuartz_CacheAddFont(const char *family, int face, CGFontRef font) {
     if (font_cache_tail->fonts >= max_fonts_per_block)
         font_cache_tail = font_cache_tail->next = (font_cache_t*) calloc(1, sizeof(font_cache_t));
     {
@@ -646,7 +646,7 @@
 CGFontRef RQuartz_Font(CTXDESC)
 {
     const char *fontName = NULL, *fontFamily = gc->fontfamily;
-    ATSFontRef atsFont = 0;
+    CGFontRef cgFont = 0;
     int fontFace = gc->fontface;
     if (fontFace < 1 || fontFace > 5) fontFace = 1; /* just being paranoid */
     if (fontFace == 5)
@@ -654,25 +654,23 @@
     else
         fontName = RQuartz_LookUpFontName(fontFace, fontFamily[0] ? fontFamily : "default");
     if (fontName) {
-        atsFont = RQuartz_CacheGetFont(fontName, 0); /* face is 0 because we are passing a true font name */
-        if (!atsFont) { /* not in the cache, get it */
+        cgFont = RQuartz_CacheGetFont(fontName, 0); /* face is 0 because we are passing a true font name */
+        if (!cgFont) { /* not in the cache, get it */
             CFStringRef cfFontName = CFStringCreateWithCString(NULL, fontName, kCFStringEncodingUTF8);
-            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
-            if (!atsFont)
-                atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);
+            cgFont = CGFontCreateWithFontName(cfFontName);
             CFRelease(cfFontName);
-            if (!atsFont) {
+            if (!cgFont) {
                 warning(_("font \"%s\" could not be found for family \"%s\""), fontName, fontFamily);
                 return NULL;
             }
-            RQuartz_CacheAddFont(fontName, 0, atsFont);
+            RQuartz_CacheAddFont(fontName, 0, cgFont);
         }
     } else { /* the real font name could not be looked up. We must use cache and/or find the right font by family and face */
         if (!fontFamily[0]) fontFamily = "Arial"; 
 	/* Arial is the default, because Helvetica doesn't have Oblique 
 	   on 10.4 - maybe change later? */
-        atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);
-        if (!atsFont) { /* not in the cache? Then we need to find the 
+        cgFont = RQuartz_CacheGetFont(fontFamily, fontFace);
+        if (!cgFont) { /* not in the cache? Then we need to find the 
 			   proper font name from the family name and face */
             /* as it turns out kATSFontFilterSelectorFontFamily is not 
 	       implemented in macOS (!!) so there is no way to query for a 
@@ -681,25 +679,24 @@
             char compositeFontName[256];
             /* CFStringRef cfFontName; */
             if (strlen(fontFamily) > 210) error(_("font family name is too long"));
-            while (!atsFont) { /* try different faces until exhausted or successful */
+            while (!cgFont) { /* try different faces until exhausted or successful */
                 strcpy(compositeFontName, fontFamily);
                 if (fontFace == 2 || fontFace == 4) strcat(compositeFontName, " Bold");
                 if (fontFace == 3 || fontFace == 4) strcat(compositeFontName, " Italic");
                 CFStringRef cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
-                if (!atsFont) atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);
+                cgFont = CGFontCreateWithFontName(cfFontName);
                 CFRelease(cfFontName);
-                if (!atsFont) {
+                if (!cgFont) {
                     if (fontFace == 1) { /* more guessing - fontFace == 1 may need Regular or Roman */
                         strcat(compositeFontName," Regular");
                         cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
+                        cgFont = CGFontCreateWithFontName(cfFontName);
                         CFRelease(cfFontName);
-                        if (!atsFont) {
+                        if (!cgFont) {
                             strcpy(compositeFontName, fontFamily);
                             strcat(compositeFontName," Roman");
                             cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
+                            cgFont = CGFontCreateWithFontName(cfFontName);
                             CFRelease(cfFontName);
                         }
                     } else if (fontFace == 3 || fontFace == 4) { /* Oblique is sometimes used instead of Italic (e.g. in Helvetica) */
@@ -707,26 +704,26 @@
                         if (fontFace == 4) strcat(compositeFontName, " Bold");
                         strcat(compositeFontName," Oblique");
                         cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);
-                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);
+                        cgFont = CGFontCreateWithFontName(cfFontName);
                         CFRelease(cfFontName);                    
                     }
                 }
-                if (!atsFont) { /* try to fall back to a more plain face */
+                if (!cgFont) { /* try to fall back to a more plain face */
                     if (fontFace == 4) fontFace = 2;
                     else if (fontFace != 1) fontFace = 1;
                     else break;
-                    atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);
-                    if (atsFont) break;
+                    cgFont = RQuartz_CacheGetFont(fontFamily, fontFace);
+                    if (cgFont) break;
                 }
             }
-            if (!atsFont)
+            if (!cgFont)
                 warning(_("no font could be found for family \"%s\""), fontFamily);
             else
-                RQuartz_CacheAddFont(fontFamily, fontFace, atsFont);
+                RQuartz_CacheAddFont(fontFamily, fontFace, cgFont);
         }
     }
 
-    return CGFontCreateWithPlatformFont(&atsFont);
+    return cgFont;
 }
 
 #define RQUARTZ_FILL   (1)
diff -ruN R-4.1.1-orig/src/main/Makefile.in R-4.1.1/src/main/Makefile.in
--- R-4.1.1-orig/src/main/Makefile.in	2023-12-01 18:46:07
+++ R-4.1.1/src/main/Makefile.in	2023-12-01 18:46:47
@@ -102,7 +102,7 @@
 R_bin_OBJECTS = Rmain.o @WANT_R_SHLIB_FALSE@$(OBJECTS)
 @WANT_R_SHLIB_FALSE@R_bin_LDADD = $(MAIN_OBJS) $(EXTRA_STATIC_LIBS) $(EXTRA_LIBS)
 ## Linked against -lRblas because -lR is and otherwise ld complains.
-@WANT_R_SHLIB_TRUE@R_bin_LDADD = -lR @BLAS_SHLIB_TRUE@-lRblas
+@WANT_R_SHLIB_TRUE@R_bin_LDADD = ../../lib@R_ARCH@/libR$(DYLIB_EXT) @BLAS_SHLIB_TRUE@../../lib@R_ARCH@/libRblas$(DYLIB_EXT)
 ## This should depend on MAIN_OBJS not MAIN_LIBS, but we can't use that.
 ## There is also a dependence on libRblas when that is internal and static.
 @WANT_R_SHLIB_FALSE@R_bin_DEPENDENCIES = $(MAIN_LIBS) $(EXTRA_STATIC_LIBS)@USE_EXPORTFILES_TRUE@ $(top_builddir)/etc/R.exp
diff -ruN R-4.1.1-orig/src/nmath/standalone/Makefile.in R-4.1.1/src/nmath/standalone/Makefile.in
--- R-4.1.1-orig/src/nmath/standalone/Makefile.in	2023-12-01 18:46:07
+++ R-4.1.1/src/nmath/standalone/Makefile.in	2023-12-01 18:46:47
@@ -134,7 +134,7 @@
 
 test: $(srcdir)/test.c
 	$(CC) -o $@ $(ALL_CPPFLAGS) $(ALL_CFLAGS) $(srcdir)/test.c \
-	  -L. -lRmath $(LIBM)
+	  libRmath$(DYLIB_EXT) $(LIBM)
 
 install: installdirs install-header @WANT_R_FRAMEWORK_FALSE@ install-pc
 @WANT_R_FRAMEWORK_FALSE@	@!(test -f $(libRmath_la)) || $(SHELL) $(top_srcdir)/tools/copy-if-change $(libRmath_la) $(DESTDIR)$(libdir)/$(libRmath_la)
