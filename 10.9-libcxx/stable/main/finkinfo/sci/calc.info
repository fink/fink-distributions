Package: calc
Version: 2.13.0.1
Revision: 1
Source: https://github.com/lcn2/%n/releases/download/v%v/%n-%v.tar.bz2
Source-MD5: 8e6b6f1da9c3726b57360e46c0a533c9
PatchFile: %n.patch
PatchFile-MD5: 0afc8edbc279a0481f4218a3bc30e1b0
BuildDepends: <<
	fink-package-precedence,
	libncurses5 (>= 5.4-20041023-1006),
	readline8
<<
Depends: <<
	ncurses (>= 5.4-20041023-1006),
	libncurses5-shlibs (>= 5.4-20041023-1006),
	readline8-shlibs
<<
GCC: 4.0
UseMaxBuildJobs: false
SetCPPFLAGS: -MD
CompileScript: <<
	make BLD_TYPE=calc-static-only PREFIX=%p
	fink-package-precedence --depfile-ext='\.d' .
<<
InstallScript: <<
	make install T=%d BLD_TYPE=calc-static-only PREFIX=%p
	mkdir -p %i/share/doc/%n
	mv %i/bin/simple %i/share/doc/%n
	rm -rf %i/include %i/lib
<<
DocFiles: BUGS CHANGES CONTRIB-CODE COPYING COPYING-LGPL LIBRARY README.FIRST README.md cal/README:README.cal
Description: C-style arbitrary precision calculator
DescPackaging: <<
	Former Maintainer: Jon Dugan <jdugan@ncsa.uiuc.edu>

	%i/bin/simple is pure documentation, hence moved, to avoid
	a conflict with cppunit1.10.2

	Shared library is not up to install_name packaging standards?
	Just build static-linked program and don't bother with public
	libs at all. Some day could spawn -{dev,shlibs} (making sure
	to Replaces:%n at previous %v-%r to avoid deadlock if old
	leaked library files)

	Make sure fink/unix-standard CPPFLAGS are propagated properly
<<
DescDetail: <<
Calc is a calculator program with arbitrary precision arithmetic.
All numbers are represented as fractions with arbitrarily large
numerators and denominators which are always reduced to lowest terms.
Real or exponential format numbers can be input and are converted
to the equivalent fraction.  Hex, binary, or octal numbers can be
input by using numbers with leading '0x', '0b' or '0' characters.
Complex numbers can be input using a trailing 'i', as in '2+3i'.
Strings and characters are input by using single or double quotes.

Commands are statements in a C-like language, where each input
line is treated as the body of a procedure.  Thus the command
line can contain variable declarations, expressions, labels,
conditional tests, and loops.  Assignments to any variable name
will automatically define that name as a global variable.  The
other important thing to know is that all non-assignment expressions
which are evaluated are automatically printed.  Thus, you can evaluate
an expression's value by simply typing it in.

Many useful built-in mathematical functions are available.  Use
the 'show builtins' command to list them.  You can also define
your own functions by using the 'define' keyword, followed by a
function declaration very similar to C.  Functions which only
need to return a simple expression can be defined using an
equals sign, as in the example 'define sc(a,b) = a^3 + b^3'.
Variables in functions can be defined as either 'global', 'local',
or 'static'.  Global variables are common to all functions and the
command line, whereas local variables are unique to each function
level, and are destroyed when the function returns.  Static variables
are scoped within single input files, or within functions, and are
never destroyed.  Variables are not typed at definition time, but
dynamically change as they are used.  So you must supply the correct
type of variable to those functions and operators which only work
for a subset of types.
<<
License: LGPL
Homepage: http://www.isthe.com/chongo/tech/comp/calc/
Maintainer: Daniel Macks <dmacks@netspace.org>
