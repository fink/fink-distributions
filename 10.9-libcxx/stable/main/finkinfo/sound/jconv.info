Package: jconv
Version: 0.8.1
Revision: 2
Source: http://www.kokkinizita.net/linuxaudio/downloads/%n-%v.tar.bz2
HomePage: http://www.kokkinizita.net/linuxaudio/
License: GPL
Description: Convolution Engine for JACK
Source-Checksum: SHA256(ca00d33525229a83209327d3e28f9119aa1a7387c58abee0d5ee05c5a3401cd6)
DocFiles: README COPYING
Depends: <<
jack-shlibs, zita-convolver1-shlibs, fftw3-shlibs, 
libsndfile1-shlibs (>= 1.0.11-2), clthreads2-shlibs
<<
BuildDepends: << 
jack-dev, zita-convolver1, fftw3, 
libsndfile1-dev (>= 1.0.11-2), clthreads2
<<
GCC: 4.0
Suggests: 
PatchScript: <<
 perl -pi -e 's|(PREFIX.?=).*|\1%i|' Makefile
 perl -pi -e 's|-lrt||' Makefile
<<
CompileScript: make
InstallScript: <<
  mkdir -p %i/bin
  make install
<<
DescDetail: <<

Jconv is a Convolution Engine for JACK, based on FFT convolution and
using non-uniform partition sizes: small ones at the start of the IR
and building up to the most efficient size further on. It can perform
zero-delay processing with moderate CPU load. Jconv uses the
convolution engine designed for Aella, a convolution application for
reverberation processing (to be announced later). This distributes the
calculation over up to five threads, one for each partition size,
running at priorities just below the the one of JACK's processing
thread. This engine will become a separate library as soon as I can
find the time to write the user documentation.

Main features:

Any matrix of convolutions between up to up 64 inputs and 64 outputs,
as long as your CPU(s) can handle it.  Allows trading off CPU load to
processing delay, and remains efficient even when configured for zero
delay.  Sparse and diagonal matrices are handled as efficiently as
dense ones. No CPU cycles or memory resources are wasted on empty
cells in the matrix, nor on empty partitions if IRs are of different
length.  Accepts the same configuration files as Jace (see below).

<<
Maintainer: Adrian Prantl <adrian@f4z.org>