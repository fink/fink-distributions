Package: libopenexr22
# 2.2.1 changes libN
Version: 2.2.0
Revision: 3
Description: Example programs using OpenEXR
License: BSD
Maintainer: David Fang <fangism@users.sourceforge.net>

Depends: %N-shlibs (= %v-%r)
BuildDepends: <<
	fink-package-precedence,
	flag-sort,
	ilmbase12
<<
Conflicts: libopenexr22, libopenexr24-dev
Replaces: libopenexr22, libopenexr24-dev
BuildDependsOnly: true
GCC: 4.0

Source: http://download.savannah.nongnu.org/releases/openexr/openexr-%v.tar.gz
Source-MD5: b64e931c82aa3790329c21418373db4e
SourceDirectory: openexr-%v
PatchScript: <<
	perl -pi -e "s|-Wno-long-double||g" configure
	# disable use of -rpath
	# fix Makefiles for examples and tests
	sed -i.orig  -e '/^LDADD =/s|-L||g' \
		-e '/^LDADD =/s|IlmImf[a-z]*|&/lib&.la|g' IlmImfExamples/Makefile.in IlmImfTest/Makefile.in
	perl -pi -e 's|-L\$\(top_builddir\)/IlmImf \@ILMBASE_LIBS\@ -lIlmImf|\$\(top_builddir\)/IlmImf/libIlmImf.la \@ILMBASE_LIBS\@|g' IlmImfUtil/Makefile.in 
<<
# flag-sort and NoSetLDFLAGS to prevent compiling/linking against own installed library
SetCC: flag-sort -r gcc
SetCXX: flag-sort -r g++
NoSetLDFLAGS: true
ConfigureParams: <<
	--enable-shared \
	--disable-static \
	--enable-imfexamples \
	--disable-osx-universal-binaries
<<
CompileScript: <<
	#!/bin/sh -ev
	%{default_script}
	fink-package-precedence --prohibit-bdep=openexr-dev,%n,libopenexr24-dev .
<<
InfoTest: <<
	TestSource: https://raw.githubusercontent.com/AcademySoftwareFoundation/openexr/RB-2.2/OpenEXR/IlmImfTest/comp_dwaa_v1.exr
	TestSource-MD5: 9be99dee4dcd8ee610f91b702349fcee
	TestSource2: https://raw.githubusercontent.com/AcademySoftwareFoundation/openexr/RB-2.2/OpenEXR/IlmImfTest/comp_dwaa_v2.exr
	TestSource2-MD5: 4b7146e79c1c456f3056f8fe34904b41
	TestSource3: https://raw.githubusercontent.com/AcademySoftwareFoundation/openexr/RB-2.2/OpenEXR/IlmImfTest/comp_dwab_v1.exr
	TestSource3-MD5: 380ce96df9642c52dbf2a599f7ee733d
	TestSource4: https://raw.githubusercontent.com/AcademySoftwareFoundation/openexr/RB-2.2/OpenEXR/IlmImfTest/comp_dwab_v2.exr
	TestSource4-MD5: a8a05993d3a68dd26959b823c4fbfd7d
	TestScript: <<
		#!/bin/sh -ev
		for f in dwaa_v1 dwaa_v2 dwab_v1 dwab_v2
		do
			mv ../comp_$f.exr IlmImfTest
		done
		make -k check || exit 2
	<<
<<
InstallScript: <<
	#!/bin/sh -ev
	make -j1 install DESTDIR="%d"
	perl -pi -e "s, \-L%b/IlmImf,,g" %i/lib/libIlmImfUtil.la
	# relocate documentation, doesn't conflict with older version
	install -d -m 755 %i/share/doc/%N
	mv %i/share/doc/OpenEXR-%v/* %i/share/doc/%N/
	rmdir %i/share/doc/OpenEXR-%v
<<
DocFiles: AUTHORS COPYING ChangeLog INSTALL LICENSE NEWS README* doc/*.pdf
SplitOff: <<
	Package: %N-shlibs
	Description: Shared libraries for OpenEXR development
	Depends: ilmbase12-shlibs
	DocFiles: AUTHORS COPYING ChangeLog INSTALL LICENSE NEWS README*
	Files: <<
		lib/libIlmImf-2_2.22.dylib
		lib/libIlmImfUtil-2_2.22.dylib
	<<
	Shlibs: <<
		%p/lib/libIlmImf-2_2.22.dylib 23.0.0 %n (>= 2.2.0-1)
		%p/lib/libIlmImfUtil-2_2.22.dylib 23.0.0 %n (>= 2.2.0-1)
	<<
<<
SplitOff2: <<
	Package: openexr
	Description: High dynamic-range (HDR) image file tools
	Depends: %N-shlibs (= %v-%r)
	Files: bin
	DocFiles: AUTHORS COPYING ChangeLog INSTALL LICENSE NEWS README*
<<

Homepage: http://www.openexr.com/
DescDetail: <<
OpenEXR is a high dynamic-range (HDR) image file format
developed by Industrial Light & Magic for use in computer
imaging applications.

OpenEXR is used by ILM on all motion pictures currently
in production.  The first movies to employ OpenEXR were
Harry Potter and the Sorcerers Stone, Men in Black II,
Gangs of New York, and Signs. Since then, OpenEXR has
become ILM's main image file format.

OpenEXR's features include:

* Higher dynamic range and color precision than existing
  8- and 10-bit image file formats.
* Support for 16-bit floating-point, 32-bit floating-point,
  and 32-bit integer pixels.  The 16-bit floating-point
  format, called "half", is compatible with the half data
  type in NVIDIA's Cg graphics language and is supported
  natively on their new GeForce FX and Quadro FX 3D
  graphics solutions.
* Multiple lossless image compression algorithms.  Some of
  the included codecs can achieve 2:1 lossless compression
  ratios on images with film grain.
* Extensibility.  New compression codecs and image types
  can easily be added by extending the C++ classes
  included in the OpenEXR software distribution.  New
  image attributes (strings, vectors, integers, etc.) can
  be added to OpenEXR image headers without affecting
  backward compatibility with existing OpenEXR
  applications.
<<
DescPackaging: <<
The development headers are in %N, the primary package.
The shared libraries are in %N-shlibs.
The program binaries are in openexr, including sample programs.

Previous Maintainer: Benjamin Reed <openexr@fink.raccoonfink.com>
<<
