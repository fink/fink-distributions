Package: podofo0.9.7-shlibs
# each upstream %v in the 0.x series is a new install_name (explicitly
# not guaranteed to be stable interface) and debian concurs with a
# separate soname package for each
#
# LIBIDN2 FTBFS; https://sourceforge.net/p/podofo/mailman/message/36224376
Version: 0.9.7
Revision: 2
Source: mirror:sourceforge:podofo/podofo-%v.tar.gz
Source-Checksum: SHA256(7cf2e716daaef89647c54ffcd08940492fd40c385ef040ce7529396bfadc1eb8)
License: GPL/LGPL
DescPackaging: <<
	Former maintainer: Martin Costabel <costabel@wanadoo.fr>

	-std=c++11 to fix multiple FTBFS. See:
	https://sourceforge.net/p/podofo/tickets/121
<<
Depends: <<
	fontconfig2-shlibs (>= 2.10.0-1),
	freetype219-shlibs (>= 2.10.2-1),
	libidn-shlibs,
	libjpeg9-shlibs,
	libpng16-shlibs,
	libtiff5-shlibs,
	libunistring2-shlibs,
	openssl110-shlibs
<<
BuildDepends: <<
	cmake (>= 2.6.0-1),
	cppunit1.15.1,
	fink (>= 0.32),
	fink-package-precedence,
	fontconfig2-dev (>= 2.10.0-1),
	freetype219 (>= 2.10.2-1),
	libidn,
	libjpeg9,
	libpng16,
	libtiff5,
	libunistring2,
	lua51-dev,
	openssl110-dev,
	pkgconfig
<<
GCC: 4.0
# despite hackery, cmake's flag spaghetti still picks up an existing
# installed version's headers ahead of the source directory being
# built
BuildConflicts: podofo9-dev, podofo0.9.7-dev
PatchFile: %n.patch
PatchFile-MD5: ada5b96cb22be19c0e0a0fad6b0bc327
PatchScript: <<
#!/bin/sh -ex
	%{default_script}
	# Virtualize explicit '/sw' in sources
	perl -pi -e 's,/sw,%p,g' cmake/modules/FindLua51.cmake
<<
CompileScript: <<
#!/bin/sh -ev
	mkdir build
	cd build
	cmake -Wno-dev -DCMAKE_VERBOSE_MAKEFILE:BOOL=ON \
		-DCMAKE_INSTALL_PREFIX:PATH=%p \
		-DCMAKE_INCLUDE_PATH:PATH=%p/include \
		-DCMAKE_LIBRARY_PATH:PATH=%p/lib \
		-DPODOFO_BUILD_SHARED:BOOL=TRUE \
		-DCMAKE_INSTALL_NAME_DIR:STRING=%p/lib \
		-DCMAKE_BUILD_WITH_INSTALL_RPATH:BOOL=ON \
		-DCMAKE_INSTALL_RPATH:STRING=%p/lib \
		-DCMAKE_EXE_LINKER_FLAGS:STRING="" \
		-DFONTCONFIG_INCLUDE_DIR:PATH=%p/lib/fontconfig2/include \
		-DFONTCONFIG_LIBRARIES:FILEPATH=%p/lib/fontconfig2/lib/libfontconfig.dylib \
		-DLIBCRYPTO_LIBRARY_RELEASE:FILEPATH=/usr/lib/libSystem.B.dylib \
		-DFREETYPE_DIR:PATH=%p/lib/freetype219 \
		-DFREETYPE_INCLUDE_DIR_FT2BUILD:PATH=%p/include/freetype2 \
		-DFREETYPE_INCLUDE_DIR_FTHEADER:PATH=%p/include/freetype2 \
		-DFREETYPE_LIBRARY:FILEPATH=%p/lib/libfreetype.dylib \
		-DCMAKE_CXX_FLAGS="-MD" \
	..

	# evil hack to find installed headers after the headers in the
	# source if you know how to do this more elegantly in cmake,
	# please tell me
#	perl -pi.bak -e 's|(\-I%p/include )(\S* )|-I.. \2\1|g' `find . -name flags.make`

	# Hack for finding not-yet-installed dylibs during making.
	# Cmake's method via CMAKE_BUILD_WITH_INSTALL_RPATH=OFF is
	# still half-baked; doesn't work for the podofo binary
	# executables
	export DYLD_LIBRARY_PATH=`pwd`/bin

	make
	cd ..
	fink-package-precedence --depfile-ext='\.d' --prohibit-bdep=podofo9-dev,podofo0.9.7-dev .
<< 
InstallScript: <<
#!/bin/sh -ev
	pushd build
	make install DESTDIR=%d
	popd
<<
DocFiles: AUTHORS CO* ChangeLog FAQ.html README.html TODO
Shlibs: %p/lib/libpodofo.0.9.7.dylib 0.9.7 %n (>= 0.9.7-1)
SplitOff: <<
	Package: podofo0.9.7-dev
	Depends: %N (= %v-%r)
	BuildDependsOnly: True
	Conflicts: podofo-dev, podofo9-dev, podofo0.9.7-dev, podofo0.9.8-dev
	Replaces: podofo-dev, podofo9-dev, podofo0.9.7-dev, podofo0.9.8-dev
	Files: <<
		include
		lib/libpodofo.dylib
		lib/pkgconfig
	<<
	DocFiles: AUTHORS CO* ChangeLog FAQ.html README.html TODO
<<
SplitOff2: <<
	Package: podofo
	Depends: <<
		%N (>= %v-%r),
		lua51-shlibs,
		openssl110-shlibs
	<<
	Files: <<
		bin
		share/man
	<<
	DocFiles: AUTHORS CO* ChangeLog FAQ.html README.html TODO
<<
SplitOff3: <<
	Package: podofo9
	Description: OBSOLETE: use podofo
	RuntimeDepends: <<
		fink-obsolete-packages,
		podofo (>= %v-%r)
	<<
	InstallScript: <<
		mkdir -p %i/share/doc/installed-packages
		touch %i/share/doc/installed-packages/%n
	<<
<<
Description: Library and tools for PDF files
DescDetail: <<
The PoDoFo library is a free, portable C++ library which includes
classes to parse PDF files and modify their contents into memory. The
changes can be written back to disk easily. The parser can also be
used to extract information from a PDF file (for example the parser
could be used in a PDF viewer). Besides parsing PoDoFo includes also
very simple classes to create your own PDF files. All classes are
documented so it is easy to start writing your own application using
PoDoFo.

The PoDoFo tools are simple tools built around the PoDoFo library.
These tools are first of all examples on how to use the PoDoFo library
in your own projects. But secondly they offer also features for
working with PDF files.
<<
Maintainer: Daniel Macks <dmacks@netspace.org>
Homepage: http://podofo.sourceforge.net/
